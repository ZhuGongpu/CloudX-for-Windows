// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace common.message {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Data {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_common_message_DataPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.DataPacket, global::common.message.DataPacket.Builder> internal__static_common_message_DataPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Command__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Command, global::common.message.Command.Builder> internal__static_common_message_Command__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Video__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Video, global::common.message.Video.Builder> internal__static_common_message_Video__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Video_Rectangle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Video.Types.Rectangle, global::common.message.Video.Types.Rectangle.Builder> internal__static_common_message_Video_Rectangle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Video_Point__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Video.Types.Point, global::common.message.Video.Types.Point.Builder> internal__static_common_message_Video_Point__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Video_MoveRectangle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Video.Types.MoveRectangle, global::common.message.Video.Types.MoveRectangle.Builder> internal__static_common_message_Video_MoveRectangle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Audio__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Audio, global::common.message.Audio.Builder> internal__static_common_message_Audio__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_DeviceInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.DeviceInfo, global::common.message.DeviceInfo.Builder> internal__static_common_message_DeviceInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Resolution__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Resolution, global::common.message.Resolution.Builder> internal__static_common_message_Resolution__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_FileRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.FileRequest, global::common.message.FileRequest.Builder> internal__static_common_message_FileRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_FileInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.FileInfo, global::common.message.FileInfo.Builder> internal__static_common_message_FileInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_FileBlock__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.FileBlock, global::common.message.FileBlock.Builder> internal__static_common_message_FileBlock__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_CloudStorageTokenRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.CloudStorageTokenRequest, global::common.message.CloudStorageTokenRequest.Builder> internal__static_common_message_CloudStorageTokenRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_CloudStorageToken__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.CloudStorageToken, global::common.message.CloudStorageToken.Builder> internal__static_common_message_CloudStorageToken__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_SharedMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.SharedMessage, global::common.message.SharedMessage.Builder> internal__static_common_message_SharedMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_KeyboardEvent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.KeyboardEvent, global::common.message.KeyboardEvent.Builder> internal__static_common_message_KeyboardEvent__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Data() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgpkYXRhLnByb3RvEg5jb21tb24ubWVzc2FnZSLuBgoKRGF0YVBhY2tldBIV" + 
          "Cg11bml4VGltZVN0YW1wGAEgAigEEkEKDmRhdGFQYWNrZXRUeXBlGAIgAigO" + 
          "MikuY29tbW9uLm1lc3NhZ2UuRGF0YVBhY2tldC5EYXRhUGFja2V0VHlwZRIu" + 
          "CgpkZXZpY2VJbmZvGAMgASgLMhouY29tbW9uLm1lc3NhZ2UuRGV2aWNlSW5m" + 
          "bxIkCgV2aWRlbxgEIAEoCzIVLmNvbW1vbi5tZXNzYWdlLlZpZGVvEiQKBWF1" + 
          "ZGlvGAUgASgLMhUuY29tbW9uLm1lc3NhZ2UuQXVkaW8SKAoHY29tbWFuZBgG" + 
          "IAEoCzIXLmNvbW1vbi5tZXNzYWdlLkNvbW1hbmQSMAoLZmlsZVJlcXVlc3QY" + 
          "ByABKAsyGy5jb21tb24ubWVzc2FnZS5GaWxlUmVxdWVzdBIqCghmaWxlSW5m" + 
          "bxgIIAEoCzIYLmNvbW1vbi5tZXNzYWdlLkZpbGVJbmZvEiwKCWZpbGVCbG9j" + 
          "axgJIAEoCzIZLmNvbW1vbi5tZXNzYWdlLkZpbGVCbG9jaxI0Cg1zaGFyZWRN" + 
          "ZXNzYWdlGAogASgLMh0uY29tbW9uLm1lc3NhZ2UuU2hhcmVkTWVzc2FnZRI0" + 
          "Cg1rZXlib2FyZEV2ZW50GAsgASgLMh0uY29tbW9uLm1lc3NhZ2UuS2V5Ym9h" + 
          "cmRFdmVudBJKChhjbG91ZFN0b3JhZ2VUb2tlblJlcXVlc3QYDCABKAsyKC5j" + 
          "b21tb24ubWVzc2FnZS5DbG91ZFN0b3JhZ2VUb2tlblJlcXVlc3QSPAoRY2xv" + 
          "dWRTdG9yYWdlVG9rZW4YDSABKAsyIS5jb21tb24ubWVzc2FnZS5DbG91ZFN0" + 
          "b3JhZ2VUb2tlbiLdAQoORGF0YVBhY2tldFR5cGUSDgoKRGV2aWNlSW5mbxAB" + 
          "EgkKBVZpZGVvEAISCQoFQXVkaW8QAxILCgdDb21tYW5kEAQSDwoLRmlsZVJl" + 
          "cXVlc3QQBRIMCghGaWxlSW5mbxAGEg0KCUZpbGVCbG9jaxAHEhEKDVNoYXJl" + 
          "ZE1lc3NhZ2UQCBIRCg1LZXlib2FyZEV2ZW50EAkSHAoYQ2xvdWRTdG9yYWdl" + 
          "VG9rZW5SZXF1ZXN0EAoSFQoRQ2xvdWRTdG9yYWdlVG9rZW4QCxIPCgtVbnNw" + 
          "ZWNpZmllZBAMIvkCCgdDb21tYW5kEjgKC2NvbW1hbmRUeXBlGAEgAigOMiMu" + 
          "Y29tbW9uLm1lc3NhZ2UuQ29tbWFuZC5Db21tYW5kVHlwZRIJCgF4GAIgASgC" + 
          "EgkKAXkYAyABKAIinQIKC0NvbW1hbmRUeXBlEgwKCE1pbmltaXplEAESDwoL" + 
          "U2hvd0Rlc2t0b3AQAhIPCgtTaHV0RG93bkFwcBADEg0KCUxlZnRDbGljaxAE" + 
          "Eg4KClJpZ2h0Q2xpY2sQBRIKCgZTY3JvbGwQBhIQCgxTZWxlY3RXaW5kb3cQ" + 
          "BxIZChVTdG9wQXVkaW9UcmFuc21pc3Npb24QCBIZChVTdG9wVmlkZW9UcmFu" + 
          "c21pc3Npb24QCRIhCh1TdG9wQXVkaW9BbmRWaWRlb1RyYW5zbWlzc2lvbhAK" + 
          "EhoKFlN0YXJ0QXVkaW9UcmFuc21pc3Npb24QCxIaChZTdGFydFZpZGVvVHJh" + 
          "bnNtaXNzaW9uEAwSEAoMRmluZE15RGV2aWNlEA0i9gIKBVZpZGVvEjMKCmRp" + 
          "cnR5UmVjdHMYASADKAsyHy5jb21tb24ubWVzc2FnZS5WaWRlby5SZWN0YW5n" + 
          "bGUSNgoJbW92ZVJlY3RzGAIgAygLMiMuY29tbW9uLm1lc3NhZ2UuVmlkZW8u" + 
          "TW92ZVJlY3RhbmdsZRINCgVmcmFtZRgDIAEoDBpPCglSZWN0YW5nbGUSCQoB" + 
          "eBgBIAIoBRIJCgF5GAIgAigFEg0KBXdpZHRoGAMgAigFEg4KBmhlaWdodBgE" + 
          "IAIoBRINCgVpbWFnZRgFIAEoDBodCgVQb2ludBIJCgF4GAEgAigFEgkKAXkY" + 
          "AiACKAUagAEKDU1vdmVSZWN0YW5nbGUSPQoUZGVzdGluYXRpb25SZWN0YW5n" + 
          "bGUYASACKAsyHy5jb21tb24ubWVzc2FnZS5WaWRlby5SZWN0YW5nbGUSMAoL" + 
          "c291cmNlUG9pbnQYAiACKAsyGy5jb21tb24ubWVzc2FnZS5WaWRlby5Qb2lu" + 
          "dCIWCgVBdWRpbxINCgVzb3VuZBgBIAEoDCJQCgpEZXZpY2VJbmZvEhIKCmRl" + 
          "dmljZU5hbWUYASABKAwSLgoKcmVzb2x1dGlvbhgCIAEoCzIaLmNvbW1vbi5t" + 
          "ZXNzYWdlLlJlc29sdXRpb24iKwoKUmVzb2x1dGlvbhINCgV3aWR0aBgBIAEo" + 
          "BRIOCgZoZWlnaHQYAiABKAUiugEKC0ZpbGVSZXF1ZXN0EkQKD2ZpbGVSZXF1" + 
          "ZXN0VHlwZRgBIAIoDjIrLmNvbW1vbi5tZXNzYWdlLkZpbGVSZXF1ZXN0LkZp" + 
          "bGVSZXF1ZXN0VHlwZRIQCghmaWxlUGF0aBgCIAIoDCJTCg9GaWxlUmVxdWVz" + 
          "dFR5cGUSFAoQT3BlbkZpbGVSZW1vdGVseRABEg4KCkRlbGV0ZUZpbGUQAhIM" + 
          "CghTYXZlRmlsZRADEgwKCFNlbmRGaWxlEAQiQAoIRmlsZUluZm8SEAoIZmls" + 
          "ZVBhdGgYASACKAwSEAoIZmlsZVNpemUYAiACKAQSEAoIZmlsZUljb24YAyAB" + 
          "KAwiHAoJRmlsZUJsb2NrEg8KB2NvbnRlbnQYASACKAwiMQoYQ2xvdWRTdG9y" + 
          "YWdlVG9rZW5SZXF1ZXN0EhUKB2V4cGlyZXMYASABKAU6BDM2MDAiIgoRQ2xv" + 
          "dWRTdG9yYWdlVG9rZW4SDQoFdG9rZW4YASACKAwiIAoNU2hhcmVkTWVzc2Fn" + 
          "ZRIPCgdjb250ZW50GAEgAigMIiAKDUtleWJvYXJkRXZlbnQSDwoHa2V5Q29k" + 
          "ZRgBIAIoBQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_common_message_DataPacket__Descriptor = Descriptor.MessageTypes[0];
        internal__static_common_message_DataPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.DataPacket, global::common.message.DataPacket.Builder>(internal__static_common_message_DataPacket__Descriptor,
                new string[] { "UnixTimeStamp", "DataPacketType", "DeviceInfo", "Video", "Audio", "Command", "FileRequest", "FileInfo", "FileBlock", "SharedMessage", "KeyboardEvent", "CloudStorageTokenRequest", "CloudStorageToken", });
        internal__static_common_message_Command__Descriptor = Descriptor.MessageTypes[1];
        internal__static_common_message_Command__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Command, global::common.message.Command.Builder>(internal__static_common_message_Command__Descriptor,
                new string[] { "CommandType", "X", "Y", });
        internal__static_common_message_Video__Descriptor = Descriptor.MessageTypes[2];
        internal__static_common_message_Video__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Video, global::common.message.Video.Builder>(internal__static_common_message_Video__Descriptor,
                new string[] { "DirtyRects", "MoveRects", "Frame", });
        internal__static_common_message_Video_Rectangle__Descriptor = internal__static_common_message_Video__Descriptor.NestedTypes[0];
        internal__static_common_message_Video_Rectangle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Video.Types.Rectangle, global::common.message.Video.Types.Rectangle.Builder>(internal__static_common_message_Video_Rectangle__Descriptor,
                new string[] { "X", "Y", "Width", "Height", "Image", });
        internal__static_common_message_Video_Point__Descriptor = internal__static_common_message_Video__Descriptor.NestedTypes[1];
        internal__static_common_message_Video_Point__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Video.Types.Point, global::common.message.Video.Types.Point.Builder>(internal__static_common_message_Video_Point__Descriptor,
                new string[] { "X", "Y", });
        internal__static_common_message_Video_MoveRectangle__Descriptor = internal__static_common_message_Video__Descriptor.NestedTypes[2];
        internal__static_common_message_Video_MoveRectangle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Video.Types.MoveRectangle, global::common.message.Video.Types.MoveRectangle.Builder>(internal__static_common_message_Video_MoveRectangle__Descriptor,
                new string[] { "DestinationRectangle", "SourcePoint", });
        internal__static_common_message_Audio__Descriptor = Descriptor.MessageTypes[3];
        internal__static_common_message_Audio__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Audio, global::common.message.Audio.Builder>(internal__static_common_message_Audio__Descriptor,
                new string[] { "Sound", });
        internal__static_common_message_DeviceInfo__Descriptor = Descriptor.MessageTypes[4];
        internal__static_common_message_DeviceInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.DeviceInfo, global::common.message.DeviceInfo.Builder>(internal__static_common_message_DeviceInfo__Descriptor,
                new string[] { "DeviceName", "Resolution", });
        internal__static_common_message_Resolution__Descriptor = Descriptor.MessageTypes[5];
        internal__static_common_message_Resolution__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Resolution, global::common.message.Resolution.Builder>(internal__static_common_message_Resolution__Descriptor,
                new string[] { "Width", "Height", });
        internal__static_common_message_FileRequest__Descriptor = Descriptor.MessageTypes[6];
        internal__static_common_message_FileRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.FileRequest, global::common.message.FileRequest.Builder>(internal__static_common_message_FileRequest__Descriptor,
                new string[] { "FileRequestType", "FilePath", });
        internal__static_common_message_FileInfo__Descriptor = Descriptor.MessageTypes[7];
        internal__static_common_message_FileInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.FileInfo, global::common.message.FileInfo.Builder>(internal__static_common_message_FileInfo__Descriptor,
                new string[] { "FilePath", "FileSize", "FileIcon", });
        internal__static_common_message_FileBlock__Descriptor = Descriptor.MessageTypes[8];
        internal__static_common_message_FileBlock__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.FileBlock, global::common.message.FileBlock.Builder>(internal__static_common_message_FileBlock__Descriptor,
                new string[] { "Content", });
        internal__static_common_message_CloudStorageTokenRequest__Descriptor = Descriptor.MessageTypes[9];
        internal__static_common_message_CloudStorageTokenRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.CloudStorageTokenRequest, global::common.message.CloudStorageTokenRequest.Builder>(internal__static_common_message_CloudStorageTokenRequest__Descriptor,
                new string[] { "Expires", });
        internal__static_common_message_CloudStorageToken__Descriptor = Descriptor.MessageTypes[10];
        internal__static_common_message_CloudStorageToken__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.CloudStorageToken, global::common.message.CloudStorageToken.Builder>(internal__static_common_message_CloudStorageToken__Descriptor,
                new string[] { "Token", });
        internal__static_common_message_SharedMessage__Descriptor = Descriptor.MessageTypes[11];
        internal__static_common_message_SharedMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.SharedMessage, global::common.message.SharedMessage.Builder>(internal__static_common_message_SharedMessage__Descriptor,
                new string[] { "Content", });
        internal__static_common_message_KeyboardEvent__Descriptor = Descriptor.MessageTypes[12];
        internal__static_common_message_KeyboardEvent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.KeyboardEvent, global::common.message.KeyboardEvent.Builder>(internal__static_common_message_KeyboardEvent__Descriptor,
                new string[] { "KeyCode", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataPacket : pb::GeneratedMessage<DataPacket, DataPacket.Builder> {
    private DataPacket() { }
    private static readonly DataPacket defaultInstance = new DataPacket().MakeReadOnly();
    private static readonly string[] _dataPacketFieldNames = new string[] { "audio", "cloudStorageToken", "cloudStorageTokenRequest", "command", "dataPacketType", "deviceInfo", "fileBlock", "fileInfo", "fileRequest", "keyboardEvent", "sharedMessage", "unixTimeStamp", "video" };
    private static readonly uint[] _dataPacketFieldTags = new uint[] { 42, 106, 98, 50, 16, 26, 74, 66, 58, 90, 82, 8, 34 };
    public static DataPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_DataPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataPacket, DataPacket.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_DataPacket__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum DataPacketType {
        DeviceInfo = 1,
        Video = 2,
        Audio = 3,
        Command = 4,
        FileRequest = 5,
        FileInfo = 6,
        FileBlock = 7,
        SharedMessage = 8,
        KeyboardEvent = 9,
        CloudStorageTokenRequest = 10,
        CloudStorageToken = 11,
        Unspecified = 12,
      }
      
    }
    #endregion
    
    public const int UnixTimeStampFieldNumber = 1;
    private bool hasUnixTimeStamp;
    private ulong unixTimeStamp_;
    public bool HasUnixTimeStamp {
      get { return hasUnixTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong UnixTimeStamp {
      get { return unixTimeStamp_; }
    }
    
    public const int DataPacketTypeFieldNumber = 2;
    private bool hasDataPacketType;
    private global::common.message.DataPacket.Types.DataPacketType dataPacketType_ = global::common.message.DataPacket.Types.DataPacketType.DeviceInfo;
    public bool HasDataPacketType {
      get { return hasDataPacketType; }
    }
    public global::common.message.DataPacket.Types.DataPacketType DataPacketType {
      get { return dataPacketType_; }
    }
    
    public const int DeviceInfoFieldNumber = 3;
    private bool hasDeviceInfo;
    private global::common.message.DeviceInfo deviceInfo_;
    public bool HasDeviceInfo {
      get { return hasDeviceInfo; }
    }
    public global::common.message.DeviceInfo DeviceInfo {
      get { return deviceInfo_ ?? global::common.message.DeviceInfo.DefaultInstance; }
    }
    
    public const int VideoFieldNumber = 4;
    private bool hasVideo;
    private global::common.message.Video video_;
    public bool HasVideo {
      get { return hasVideo; }
    }
    public global::common.message.Video Video {
      get { return video_ ?? global::common.message.Video.DefaultInstance; }
    }
    
    public const int AudioFieldNumber = 5;
    private bool hasAudio;
    private global::common.message.Audio audio_;
    public bool HasAudio {
      get { return hasAudio; }
    }
    public global::common.message.Audio Audio {
      get { return audio_ ?? global::common.message.Audio.DefaultInstance; }
    }
    
    public const int CommandFieldNumber = 6;
    private bool hasCommand;
    private global::common.message.Command command_;
    public bool HasCommand {
      get { return hasCommand; }
    }
    public global::common.message.Command Command {
      get { return command_ ?? global::common.message.Command.DefaultInstance; }
    }
    
    public const int FileRequestFieldNumber = 7;
    private bool hasFileRequest;
    private global::common.message.FileRequest fileRequest_;
    public bool HasFileRequest {
      get { return hasFileRequest; }
    }
    public global::common.message.FileRequest FileRequest {
      get { return fileRequest_ ?? global::common.message.FileRequest.DefaultInstance; }
    }
    
    public const int FileInfoFieldNumber = 8;
    private bool hasFileInfo;
    private global::common.message.FileInfo fileInfo_;
    public bool HasFileInfo {
      get { return hasFileInfo; }
    }
    public global::common.message.FileInfo FileInfo {
      get { return fileInfo_ ?? global::common.message.FileInfo.DefaultInstance; }
    }
    
    public const int FileBlockFieldNumber = 9;
    private bool hasFileBlock;
    private global::common.message.FileBlock fileBlock_;
    public bool HasFileBlock {
      get { return hasFileBlock; }
    }
    public global::common.message.FileBlock FileBlock {
      get { return fileBlock_ ?? global::common.message.FileBlock.DefaultInstance; }
    }
    
    public const int SharedMessageFieldNumber = 10;
    private bool hasSharedMessage;
    private global::common.message.SharedMessage sharedMessage_;
    public bool HasSharedMessage {
      get { return hasSharedMessage; }
    }
    public global::common.message.SharedMessage SharedMessage {
      get { return sharedMessage_ ?? global::common.message.SharedMessage.DefaultInstance; }
    }
    
    public const int KeyboardEventFieldNumber = 11;
    private bool hasKeyboardEvent;
    private global::common.message.KeyboardEvent keyboardEvent_;
    public bool HasKeyboardEvent {
      get { return hasKeyboardEvent; }
    }
    public global::common.message.KeyboardEvent KeyboardEvent {
      get { return keyboardEvent_ ?? global::common.message.KeyboardEvent.DefaultInstance; }
    }
    
    public const int CloudStorageTokenRequestFieldNumber = 12;
    private bool hasCloudStorageTokenRequest;
    private global::common.message.CloudStorageTokenRequest cloudStorageTokenRequest_;
    public bool HasCloudStorageTokenRequest {
      get { return hasCloudStorageTokenRequest; }
    }
    public global::common.message.CloudStorageTokenRequest CloudStorageTokenRequest {
      get { return cloudStorageTokenRequest_ ?? global::common.message.CloudStorageTokenRequest.DefaultInstance; }
    }
    
    public const int CloudStorageTokenFieldNumber = 13;
    private bool hasCloudStorageToken;
    private global::common.message.CloudStorageToken cloudStorageToken_;
    public bool HasCloudStorageToken {
      get { return hasCloudStorageToken; }
    }
    public global::common.message.CloudStorageToken CloudStorageToken {
      get { return cloudStorageToken_ ?? global::common.message.CloudStorageToken.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUnixTimeStamp) return false;
        if (!hasDataPacketType) return false;
        if (HasVideo) {
          if (!Video.IsInitialized) return false;
        }
        if (HasCommand) {
          if (!Command.IsInitialized) return false;
        }
        if (HasFileRequest) {
          if (!FileRequest.IsInitialized) return false;
        }
        if (HasFileInfo) {
          if (!FileInfo.IsInitialized) return false;
        }
        if (HasFileBlock) {
          if (!FileBlock.IsInitialized) return false;
        }
        if (HasSharedMessage) {
          if (!SharedMessage.IsInitialized) return false;
        }
        if (HasKeyboardEvent) {
          if (!KeyboardEvent.IsInitialized) return false;
        }
        if (HasCloudStorageToken) {
          if (!CloudStorageToken.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataPacketFieldNames;
      if (hasUnixTimeStamp) {
        output.WriteUInt64(1, field_names[11], UnixTimeStamp);
      }
      if (hasDataPacketType) {
        output.WriteEnum(2, field_names[4], (int) DataPacketType, DataPacketType);
      }
      if (hasDeviceInfo) {
        output.WriteMessage(3, field_names[5], DeviceInfo);
      }
      if (hasVideo) {
        output.WriteMessage(4, field_names[12], Video);
      }
      if (hasAudio) {
        output.WriteMessage(5, field_names[0], Audio);
      }
      if (hasCommand) {
        output.WriteMessage(6, field_names[3], Command);
      }
      if (hasFileRequest) {
        output.WriteMessage(7, field_names[8], FileRequest);
      }
      if (hasFileInfo) {
        output.WriteMessage(8, field_names[7], FileInfo);
      }
      if (hasFileBlock) {
        output.WriteMessage(9, field_names[6], FileBlock);
      }
      if (hasSharedMessage) {
        output.WriteMessage(10, field_names[10], SharedMessage);
      }
      if (hasKeyboardEvent) {
        output.WriteMessage(11, field_names[9], KeyboardEvent);
      }
      if (hasCloudStorageTokenRequest) {
        output.WriteMessage(12, field_names[2], CloudStorageTokenRequest);
      }
      if (hasCloudStorageToken) {
        output.WriteMessage(13, field_names[1], CloudStorageToken);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUnixTimeStamp) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, UnixTimeStamp);
        }
        if (hasDataPacketType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) DataPacketType);
        }
        if (hasDeviceInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, DeviceInfo);
        }
        if (hasVideo) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Video);
        }
        if (hasAudio) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Audio);
        }
        if (hasCommand) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Command);
        }
        if (hasFileRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, FileRequest);
        }
        if (hasFileInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, FileInfo);
        }
        if (hasFileBlock) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, FileBlock);
        }
        if (hasSharedMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, SharedMessage);
        }
        if (hasKeyboardEvent) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, KeyboardEvent);
        }
        if (hasCloudStorageTokenRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, CloudStorageTokenRequest);
        }
        if (hasCloudStorageToken) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, CloudStorageToken);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DataPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DataPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataPacket result;
      
      private DataPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          DataPacket original = result;
          result = new DataPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.DataPacket.Descriptor; }
      }
      
      public override DataPacket DefaultInstanceForType {
        get { return global::common.message.DataPacket.DefaultInstance; }
      }
      
      public override DataPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataPacket) {
          return MergeFrom((DataPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataPacket other) {
        if (other == global::common.message.DataPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUnixTimeStamp) {
          UnixTimeStamp = other.UnixTimeStamp;
        }
        if (other.HasDataPacketType) {
          DataPacketType = other.DataPacketType;
        }
        if (other.HasDeviceInfo) {
          MergeDeviceInfo(other.DeviceInfo);
        }
        if (other.HasVideo) {
          MergeVideo(other.Video);
        }
        if (other.HasAudio) {
          MergeAudio(other.Audio);
        }
        if (other.HasCommand) {
          MergeCommand(other.Command);
        }
        if (other.HasFileRequest) {
          MergeFileRequest(other.FileRequest);
        }
        if (other.HasFileInfo) {
          MergeFileInfo(other.FileInfo);
        }
        if (other.HasFileBlock) {
          MergeFileBlock(other.FileBlock);
        }
        if (other.HasSharedMessage) {
          MergeSharedMessage(other.SharedMessage);
        }
        if (other.HasKeyboardEvent) {
          MergeKeyboardEvent(other.KeyboardEvent);
        }
        if (other.HasCloudStorageTokenRequest) {
          MergeCloudStorageTokenRequest(other.CloudStorageTokenRequest);
        }
        if (other.HasCloudStorageToken) {
          MergeCloudStorageToken(other.CloudStorageToken);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUnixTimeStamp = input.ReadUInt64(ref result.unixTimeStamp_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.dataPacketType_, out unknown)) {
                result.hasDataPacketType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              global::common.message.DeviceInfo.Builder subBuilder = global::common.message.DeviceInfo.CreateBuilder();
              if (result.hasDeviceInfo) {
                subBuilder.MergeFrom(DeviceInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeviceInfo = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::common.message.Video.Builder subBuilder = global::common.message.Video.CreateBuilder();
              if (result.hasVideo) {
                subBuilder.MergeFrom(Video);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Video = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::common.message.Audio.Builder subBuilder = global::common.message.Audio.CreateBuilder();
              if (result.hasAudio) {
                subBuilder.MergeFrom(Audio);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Audio = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::common.message.Command.Builder subBuilder = global::common.message.Command.CreateBuilder();
              if (result.hasCommand) {
                subBuilder.MergeFrom(Command);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Command = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::common.message.FileRequest.Builder subBuilder = global::common.message.FileRequest.CreateBuilder();
              if (result.hasFileRequest) {
                subBuilder.MergeFrom(FileRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FileRequest = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::common.message.FileInfo.Builder subBuilder = global::common.message.FileInfo.CreateBuilder();
              if (result.hasFileInfo) {
                subBuilder.MergeFrom(FileInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FileInfo = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::common.message.FileBlock.Builder subBuilder = global::common.message.FileBlock.CreateBuilder();
              if (result.hasFileBlock) {
                subBuilder.MergeFrom(FileBlock);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FileBlock = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::common.message.SharedMessage.Builder subBuilder = global::common.message.SharedMessage.CreateBuilder();
              if (result.hasSharedMessage) {
                subBuilder.MergeFrom(SharedMessage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SharedMessage = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::common.message.KeyboardEvent.Builder subBuilder = global::common.message.KeyboardEvent.CreateBuilder();
              if (result.hasKeyboardEvent) {
                subBuilder.MergeFrom(KeyboardEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KeyboardEvent = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::common.message.CloudStorageTokenRequest.Builder subBuilder = global::common.message.CloudStorageTokenRequest.CreateBuilder();
              if (result.hasCloudStorageTokenRequest) {
                subBuilder.MergeFrom(CloudStorageTokenRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CloudStorageTokenRequest = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::common.message.CloudStorageToken.Builder subBuilder = global::common.message.CloudStorageToken.CreateBuilder();
              if (result.hasCloudStorageToken) {
                subBuilder.MergeFrom(CloudStorageToken);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CloudStorageToken = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUnixTimeStamp {
        get { return result.hasUnixTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong UnixTimeStamp {
        get { return result.UnixTimeStamp; }
        set { SetUnixTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUnixTimeStamp(ulong value) {
        PrepareBuilder();
        result.hasUnixTimeStamp = true;
        result.unixTimeStamp_ = value;
        return this;
      }
      public Builder ClearUnixTimeStamp() {
        PrepareBuilder();
        result.hasUnixTimeStamp = false;
        result.unixTimeStamp_ = 0UL;
        return this;
      }
      
      public bool HasDataPacketType {
       get { return result.hasDataPacketType; }
      }
      public global::common.message.DataPacket.Types.DataPacketType DataPacketType {
        get { return result.DataPacketType; }
        set { SetDataPacketType(value); }
      }
      public Builder SetDataPacketType(global::common.message.DataPacket.Types.DataPacketType value) {
        PrepareBuilder();
        result.hasDataPacketType = true;
        result.dataPacketType_ = value;
        return this;
      }
      public Builder ClearDataPacketType() {
        PrepareBuilder();
        result.hasDataPacketType = false;
        result.dataPacketType_ = global::common.message.DataPacket.Types.DataPacketType.DeviceInfo;
        return this;
      }
      
      public bool HasDeviceInfo {
       get { return result.hasDeviceInfo; }
      }
      public global::common.message.DeviceInfo DeviceInfo {
        get { return result.DeviceInfo; }
        set { SetDeviceInfo(value); }
      }
      public Builder SetDeviceInfo(global::common.message.DeviceInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceInfo = true;
        result.deviceInfo_ = value;
        return this;
      }
      public Builder SetDeviceInfo(global::common.message.DeviceInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeviceInfo = true;
        result.deviceInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeviceInfo(global::common.message.DeviceInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeviceInfo &&
            result.deviceInfo_ != global::common.message.DeviceInfo.DefaultInstance) {
            result.deviceInfo_ = global::common.message.DeviceInfo.CreateBuilder(result.deviceInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.deviceInfo_ = value;
        }
        result.hasDeviceInfo = true;
        return this;
      }
      public Builder ClearDeviceInfo() {
        PrepareBuilder();
        result.hasDeviceInfo = false;
        result.deviceInfo_ = null;
        return this;
      }
      
      public bool HasVideo {
       get { return result.hasVideo; }
      }
      public global::common.message.Video Video {
        get { return result.Video; }
        set { SetVideo(value); }
      }
      public Builder SetVideo(global::common.message.Video value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVideo = true;
        result.video_ = value;
        return this;
      }
      public Builder SetVideo(global::common.message.Video.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVideo = true;
        result.video_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVideo(global::common.message.Video value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVideo &&
            result.video_ != global::common.message.Video.DefaultInstance) {
            result.video_ = global::common.message.Video.CreateBuilder(result.video_).MergeFrom(value).BuildPartial();
        } else {
          result.video_ = value;
        }
        result.hasVideo = true;
        return this;
      }
      public Builder ClearVideo() {
        PrepareBuilder();
        result.hasVideo = false;
        result.video_ = null;
        return this;
      }
      
      public bool HasAudio {
       get { return result.hasAudio; }
      }
      public global::common.message.Audio Audio {
        get { return result.Audio; }
        set { SetAudio(value); }
      }
      public Builder SetAudio(global::common.message.Audio value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAudio = true;
        result.audio_ = value;
        return this;
      }
      public Builder SetAudio(global::common.message.Audio.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAudio = true;
        result.audio_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAudio(global::common.message.Audio value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAudio &&
            result.audio_ != global::common.message.Audio.DefaultInstance) {
            result.audio_ = global::common.message.Audio.CreateBuilder(result.audio_).MergeFrom(value).BuildPartial();
        } else {
          result.audio_ = value;
        }
        result.hasAudio = true;
        return this;
      }
      public Builder ClearAudio() {
        PrepareBuilder();
        result.hasAudio = false;
        result.audio_ = null;
        return this;
      }
      
      public bool HasCommand {
       get { return result.hasCommand; }
      }
      public global::common.message.Command Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(global::common.message.Command value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder SetCommand(global::common.message.Command.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCommand(global::common.message.Command value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCommand &&
            result.command_ != global::common.message.Command.DefaultInstance) {
            result.command_ = global::common.message.Command.CreateBuilder(result.command_).MergeFrom(value).BuildPartial();
        } else {
          result.command_ = value;
        }
        result.hasCommand = true;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = null;
        return this;
      }
      
      public bool HasFileRequest {
       get { return result.hasFileRequest; }
      }
      public global::common.message.FileRequest FileRequest {
        get { return result.FileRequest; }
        set { SetFileRequest(value); }
      }
      public Builder SetFileRequest(global::common.message.FileRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileRequest = true;
        result.fileRequest_ = value;
        return this;
      }
      public Builder SetFileRequest(global::common.message.FileRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFileRequest = true;
        result.fileRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFileRequest(global::common.message.FileRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFileRequest &&
            result.fileRequest_ != global::common.message.FileRequest.DefaultInstance) {
            result.fileRequest_ = global::common.message.FileRequest.CreateBuilder(result.fileRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.fileRequest_ = value;
        }
        result.hasFileRequest = true;
        return this;
      }
      public Builder ClearFileRequest() {
        PrepareBuilder();
        result.hasFileRequest = false;
        result.fileRequest_ = null;
        return this;
      }
      
      public bool HasFileInfo {
       get { return result.hasFileInfo; }
      }
      public global::common.message.FileInfo FileInfo {
        get { return result.FileInfo; }
        set { SetFileInfo(value); }
      }
      public Builder SetFileInfo(global::common.message.FileInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileInfo = true;
        result.fileInfo_ = value;
        return this;
      }
      public Builder SetFileInfo(global::common.message.FileInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFileInfo = true;
        result.fileInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFileInfo(global::common.message.FileInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFileInfo &&
            result.fileInfo_ != global::common.message.FileInfo.DefaultInstance) {
            result.fileInfo_ = global::common.message.FileInfo.CreateBuilder(result.fileInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.fileInfo_ = value;
        }
        result.hasFileInfo = true;
        return this;
      }
      public Builder ClearFileInfo() {
        PrepareBuilder();
        result.hasFileInfo = false;
        result.fileInfo_ = null;
        return this;
      }
      
      public bool HasFileBlock {
       get { return result.hasFileBlock; }
      }
      public global::common.message.FileBlock FileBlock {
        get { return result.FileBlock; }
        set { SetFileBlock(value); }
      }
      public Builder SetFileBlock(global::common.message.FileBlock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileBlock = true;
        result.fileBlock_ = value;
        return this;
      }
      public Builder SetFileBlock(global::common.message.FileBlock.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFileBlock = true;
        result.fileBlock_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFileBlock(global::common.message.FileBlock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFileBlock &&
            result.fileBlock_ != global::common.message.FileBlock.DefaultInstance) {
            result.fileBlock_ = global::common.message.FileBlock.CreateBuilder(result.fileBlock_).MergeFrom(value).BuildPartial();
        } else {
          result.fileBlock_ = value;
        }
        result.hasFileBlock = true;
        return this;
      }
      public Builder ClearFileBlock() {
        PrepareBuilder();
        result.hasFileBlock = false;
        result.fileBlock_ = null;
        return this;
      }
      
      public bool HasSharedMessage {
       get { return result.hasSharedMessage; }
      }
      public global::common.message.SharedMessage SharedMessage {
        get { return result.SharedMessage; }
        set { SetSharedMessage(value); }
      }
      public Builder SetSharedMessage(global::common.message.SharedMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSharedMessage = true;
        result.sharedMessage_ = value;
        return this;
      }
      public Builder SetSharedMessage(global::common.message.SharedMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSharedMessage = true;
        result.sharedMessage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSharedMessage(global::common.message.SharedMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSharedMessage &&
            result.sharedMessage_ != global::common.message.SharedMessage.DefaultInstance) {
            result.sharedMessage_ = global::common.message.SharedMessage.CreateBuilder(result.sharedMessage_).MergeFrom(value).BuildPartial();
        } else {
          result.sharedMessage_ = value;
        }
        result.hasSharedMessage = true;
        return this;
      }
      public Builder ClearSharedMessage() {
        PrepareBuilder();
        result.hasSharedMessage = false;
        result.sharedMessage_ = null;
        return this;
      }
      
      public bool HasKeyboardEvent {
       get { return result.hasKeyboardEvent; }
      }
      public global::common.message.KeyboardEvent KeyboardEvent {
        get { return result.KeyboardEvent; }
        set { SetKeyboardEvent(value); }
      }
      public Builder SetKeyboardEvent(global::common.message.KeyboardEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKeyboardEvent = true;
        result.keyboardEvent_ = value;
        return this;
      }
      public Builder SetKeyboardEvent(global::common.message.KeyboardEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKeyboardEvent = true;
        result.keyboardEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKeyboardEvent(global::common.message.KeyboardEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKeyboardEvent &&
            result.keyboardEvent_ != global::common.message.KeyboardEvent.DefaultInstance) {
            result.keyboardEvent_ = global::common.message.KeyboardEvent.CreateBuilder(result.keyboardEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.keyboardEvent_ = value;
        }
        result.hasKeyboardEvent = true;
        return this;
      }
      public Builder ClearKeyboardEvent() {
        PrepareBuilder();
        result.hasKeyboardEvent = false;
        result.keyboardEvent_ = null;
        return this;
      }
      
      public bool HasCloudStorageTokenRequest {
       get { return result.hasCloudStorageTokenRequest; }
      }
      public global::common.message.CloudStorageTokenRequest CloudStorageTokenRequest {
        get { return result.CloudStorageTokenRequest; }
        set { SetCloudStorageTokenRequest(value); }
      }
      public Builder SetCloudStorageTokenRequest(global::common.message.CloudStorageTokenRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCloudStorageTokenRequest = true;
        result.cloudStorageTokenRequest_ = value;
        return this;
      }
      public Builder SetCloudStorageTokenRequest(global::common.message.CloudStorageTokenRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCloudStorageTokenRequest = true;
        result.cloudStorageTokenRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCloudStorageTokenRequest(global::common.message.CloudStorageTokenRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCloudStorageTokenRequest &&
            result.cloudStorageTokenRequest_ != global::common.message.CloudStorageTokenRequest.DefaultInstance) {
            result.cloudStorageTokenRequest_ = global::common.message.CloudStorageTokenRequest.CreateBuilder(result.cloudStorageTokenRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.cloudStorageTokenRequest_ = value;
        }
        result.hasCloudStorageTokenRequest = true;
        return this;
      }
      public Builder ClearCloudStorageTokenRequest() {
        PrepareBuilder();
        result.hasCloudStorageTokenRequest = false;
        result.cloudStorageTokenRequest_ = null;
        return this;
      }
      
      public bool HasCloudStorageToken {
       get { return result.hasCloudStorageToken; }
      }
      public global::common.message.CloudStorageToken CloudStorageToken {
        get { return result.CloudStorageToken; }
        set { SetCloudStorageToken(value); }
      }
      public Builder SetCloudStorageToken(global::common.message.CloudStorageToken value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCloudStorageToken = true;
        result.cloudStorageToken_ = value;
        return this;
      }
      public Builder SetCloudStorageToken(global::common.message.CloudStorageToken.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCloudStorageToken = true;
        result.cloudStorageToken_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCloudStorageToken(global::common.message.CloudStorageToken value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCloudStorageToken &&
            result.cloudStorageToken_ != global::common.message.CloudStorageToken.DefaultInstance) {
            result.cloudStorageToken_ = global::common.message.CloudStorageToken.CreateBuilder(result.cloudStorageToken_).MergeFrom(value).BuildPartial();
        } else {
          result.cloudStorageToken_ = value;
        }
        result.hasCloudStorageToken = true;
        return this;
      }
      public Builder ClearCloudStorageToken() {
        PrepareBuilder();
        result.hasCloudStorageToken = false;
        result.cloudStorageToken_ = null;
        return this;
      }
    }
    static DataPacket() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Command : pb::GeneratedMessage<Command, Command.Builder> {
    private Command() { }
    private static readonly Command defaultInstance = new Command().MakeReadOnly();
    private static readonly string[] _commandFieldNames = new string[] { "commandType", "x", "y" };
    private static readonly uint[] _commandFieldTags = new uint[] { 8, 21, 29 };
    public static Command DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Command__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command, Command.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Command__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CommandType {
        Minimize = 1,
        ShowDesktop = 2,
        ShutDownApp = 3,
        LeftClick = 4,
        RightClick = 5,
        Scroll = 6,
        SelectWindow = 7,
        StopAudioTransmission = 8,
        StopVideoTransmission = 9,
        StopAudioAndVideoTransmission = 10,
        StartAudioTransmission = 11,
        StartVideoTransmission = 12,
        FindMyDevice = 13,
      }
      
    }
    #endregion
    
    public const int CommandTypeFieldNumber = 1;
    private bool hasCommandType;
    private global::common.message.Command.Types.CommandType commandType_ = global::common.message.Command.Types.CommandType.Minimize;
    public bool HasCommandType {
      get { return hasCommandType; }
    }
    public global::common.message.Command.Types.CommandType CommandType {
      get { return commandType_; }
    }
    
    public const int XFieldNumber = 2;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 3;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCommandType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandFieldNames;
      if (hasCommandType) {
        output.WriteEnum(1, field_names[0], (int) CommandType, CommandType);
      }
      if (hasX) {
        output.WriteFloat(2, field_names[1], X);
      }
      if (hasY) {
        output.WriteFloat(3, field_names[2], Y);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCommandType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) CommandType);
        }
        if (hasX) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Y);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Command, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command result;
      
      private Command PrepareBuilder() {
        if (resultIsReadOnly) {
          Command original = result;
          result = new Command();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Command.Descriptor; }
      }
      
      public override Command DefaultInstanceForType {
        get { return global::common.message.Command.DefaultInstance; }
      }
      
      public override Command BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command) {
          return MergeFrom((Command) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command other) {
        if (other == global::common.message.Command.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCommandType) {
          CommandType = other.CommandType;
        }
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.commandType_, out unknown)) {
                result.hasCommandType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 21: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 29: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCommandType {
       get { return result.hasCommandType; }
      }
      public global::common.message.Command.Types.CommandType CommandType {
        get { return result.CommandType; }
        set { SetCommandType(value); }
      }
      public Builder SetCommandType(global::common.message.Command.Types.CommandType value) {
        PrepareBuilder();
        result.hasCommandType = true;
        result.commandType_ = value;
        return this;
      }
      public Builder ClearCommandType() {
        PrepareBuilder();
        result.hasCommandType = false;
        result.commandType_ = global::common.message.Command.Types.CommandType.Minimize;
        return this;
      }
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
    }
    static Command() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Video : pb::GeneratedMessage<Video, Video.Builder> {
    private Video() { }
    private static readonly Video defaultInstance = new Video().MakeReadOnly();
    private static readonly string[] _videoFieldNames = new string[] { "dirtyRects", "frame", "moveRects" };
    private static readonly uint[] _videoFieldTags = new uint[] { 10, 26, 18 };
    public static Video DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Video DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Video ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Video__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Video, Video.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Video__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Rectangle : pb::GeneratedMessage<Rectangle, Rectangle.Builder> {
        private Rectangle() { }
        private static readonly Rectangle defaultInstance = new Rectangle().MakeReadOnly();
        private static readonly string[] _rectangleFieldNames = new string[] { "height", "image", "width", "x", "y" };
        private static readonly uint[] _rectangleFieldTags = new uint[] { 32, 42, 24, 8, 16 };
        public static Rectangle DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Rectangle DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Rectangle ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::common.message.Data.internal__static_common_message_Video_Rectangle__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Rectangle, Rectangle.Builder> InternalFieldAccessors {
          get { return global::common.message.Data.internal__static_common_message_Video_Rectangle__FieldAccessorTable; }
        }
        
        public const int XFieldNumber = 1;
        private bool hasX;
        private int x_;
        public bool HasX {
          get { return hasX; }
        }
        public int X {
          get { return x_; }
        }
        
        public const int YFieldNumber = 2;
        private bool hasY;
        private int y_;
        public bool HasY {
          get { return hasY; }
        }
        public int Y {
          get { return y_; }
        }
        
        public const int WidthFieldNumber = 3;
        private bool hasWidth;
        private int width_;
        public bool HasWidth {
          get { return hasWidth; }
        }
        public int Width {
          get { return width_; }
        }
        
        public const int HeightFieldNumber = 4;
        private bool hasHeight;
        private int height_;
        public bool HasHeight {
          get { return hasHeight; }
        }
        public int Height {
          get { return height_; }
        }
        
        public const int ImageFieldNumber = 5;
        private bool hasImage;
        private pb::ByteString image_ = pb::ByteString.Empty;
        public bool HasImage {
          get { return hasImage; }
        }
        public pb::ByteString Image {
          get { return image_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasX) return false;
            if (!hasY) return false;
            if (!hasWidth) return false;
            if (!hasHeight) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _rectangleFieldNames;
          if (hasX) {
            output.WriteInt32(1, field_names[3], X);
          }
          if (hasY) {
            output.WriteInt32(2, field_names[4], Y);
          }
          if (hasWidth) {
            output.WriteInt32(3, field_names[2], Width);
          }
          if (hasHeight) {
            output.WriteInt32(4, field_names[0], Height);
          }
          if (hasImage) {
            output.WriteBytes(5, field_names[1], Image);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasX) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, X);
            }
            if (hasY) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
            }
            if (hasWidth) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, Width);
            }
            if (hasHeight) {
              size += pb::CodedOutputStream.ComputeInt32Size(4, Height);
            }
            if (hasImage) {
              size += pb::CodedOutputStream.ComputeBytesSize(5, Image);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Rectangle ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Rectangle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Rectangle ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Rectangle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Rectangle ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Rectangle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Rectangle ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Rectangle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Rectangle ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Rectangle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Rectangle MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Rectangle prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Rectangle, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Rectangle cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Rectangle result;
          
          private Rectangle PrepareBuilder() {
            if (resultIsReadOnly) {
              Rectangle original = result;
              result = new Rectangle();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Rectangle MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::common.message.Video.Types.Rectangle.Descriptor; }
          }
          
          public override Rectangle DefaultInstanceForType {
            get { return global::common.message.Video.Types.Rectangle.DefaultInstance; }
          }
          
          public override Rectangle BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Rectangle) {
              return MergeFrom((Rectangle) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Rectangle other) {
            if (other == global::common.message.Video.Types.Rectangle.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasX) {
              X = other.X;
            }
            if (other.HasY) {
              Y = other.Y;
            }
            if (other.HasWidth) {
              Width = other.Width;
            }
            if (other.HasHeight) {
              Height = other.Height;
            }
            if (other.HasImage) {
              Image = other.Image;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_rectangleFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _rectangleFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasX = input.ReadInt32(ref result.x_);
                  break;
                }
                case 16: {
                  result.hasY = input.ReadInt32(ref result.y_);
                  break;
                }
                case 24: {
                  result.hasWidth = input.ReadInt32(ref result.width_);
                  break;
                }
                case 32: {
                  result.hasHeight = input.ReadInt32(ref result.height_);
                  break;
                }
                case 42: {
                  result.hasImage = input.ReadBytes(ref result.image_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasX {
            get { return result.hasX; }
          }
          public int X {
            get { return result.X; }
            set { SetX(value); }
          }
          public Builder SetX(int value) {
            PrepareBuilder();
            result.hasX = true;
            result.x_ = value;
            return this;
          }
          public Builder ClearX() {
            PrepareBuilder();
            result.hasX = false;
            result.x_ = 0;
            return this;
          }
          
          public bool HasY {
            get { return result.hasY; }
          }
          public int Y {
            get { return result.Y; }
            set { SetY(value); }
          }
          public Builder SetY(int value) {
            PrepareBuilder();
            result.hasY = true;
            result.y_ = value;
            return this;
          }
          public Builder ClearY() {
            PrepareBuilder();
            result.hasY = false;
            result.y_ = 0;
            return this;
          }
          
          public bool HasWidth {
            get { return result.hasWidth; }
          }
          public int Width {
            get { return result.Width; }
            set { SetWidth(value); }
          }
          public Builder SetWidth(int value) {
            PrepareBuilder();
            result.hasWidth = true;
            result.width_ = value;
            return this;
          }
          public Builder ClearWidth() {
            PrepareBuilder();
            result.hasWidth = false;
            result.width_ = 0;
            return this;
          }
          
          public bool HasHeight {
            get { return result.hasHeight; }
          }
          public int Height {
            get { return result.Height; }
            set { SetHeight(value); }
          }
          public Builder SetHeight(int value) {
            PrepareBuilder();
            result.hasHeight = true;
            result.height_ = value;
            return this;
          }
          public Builder ClearHeight() {
            PrepareBuilder();
            result.hasHeight = false;
            result.height_ = 0;
            return this;
          }
          
          public bool HasImage {
            get { return result.hasImage; }
          }
          public pb::ByteString Image {
            get { return result.Image; }
            set { SetImage(value); }
          }
          public Builder SetImage(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasImage = true;
            result.image_ = value;
            return this;
          }
          public Builder ClearImage() {
            PrepareBuilder();
            result.hasImage = false;
            result.image_ = pb::ByteString.Empty;
            return this;
          }
        }
        static Rectangle() {
          object.ReferenceEquals(global::common.message.Data.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Point : pb::GeneratedMessage<Point, Point.Builder> {
        private Point() { }
        private static readonly Point defaultInstance = new Point().MakeReadOnly();
        private static readonly string[] _pointFieldNames = new string[] { "x", "y" };
        private static readonly uint[] _pointFieldTags = new uint[] { 8, 16 };
        public static Point DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Point DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Point ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::common.message.Data.internal__static_common_message_Video_Point__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Point, Point.Builder> InternalFieldAccessors {
          get { return global::common.message.Data.internal__static_common_message_Video_Point__FieldAccessorTable; }
        }
        
        public const int XFieldNumber = 1;
        private bool hasX;
        private int x_;
        public bool HasX {
          get { return hasX; }
        }
        public int X {
          get { return x_; }
        }
        
        public const int YFieldNumber = 2;
        private bool hasY;
        private int y_;
        public bool HasY {
          get { return hasY; }
        }
        public int Y {
          get { return y_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasX) return false;
            if (!hasY) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _pointFieldNames;
          if (hasX) {
            output.WriteInt32(1, field_names[0], X);
          }
          if (hasY) {
            output.WriteInt32(2, field_names[1], Y);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasX) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, X);
            }
            if (hasY) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Point ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Point ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Point ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Point ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Point ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Point ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Point ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Point ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Point ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Point ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Point MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Point prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Point, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Point cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Point result;
          
          private Point PrepareBuilder() {
            if (resultIsReadOnly) {
              Point original = result;
              result = new Point();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Point MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::common.message.Video.Types.Point.Descriptor; }
          }
          
          public override Point DefaultInstanceForType {
            get { return global::common.message.Video.Types.Point.DefaultInstance; }
          }
          
          public override Point BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Point) {
              return MergeFrom((Point) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Point other) {
            if (other == global::common.message.Video.Types.Point.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasX) {
              X = other.X;
            }
            if (other.HasY) {
              Y = other.Y;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_pointFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _pointFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasX = input.ReadInt32(ref result.x_);
                  break;
                }
                case 16: {
                  result.hasY = input.ReadInt32(ref result.y_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasX {
            get { return result.hasX; }
          }
          public int X {
            get { return result.X; }
            set { SetX(value); }
          }
          public Builder SetX(int value) {
            PrepareBuilder();
            result.hasX = true;
            result.x_ = value;
            return this;
          }
          public Builder ClearX() {
            PrepareBuilder();
            result.hasX = false;
            result.x_ = 0;
            return this;
          }
          
          public bool HasY {
            get { return result.hasY; }
          }
          public int Y {
            get { return result.Y; }
            set { SetY(value); }
          }
          public Builder SetY(int value) {
            PrepareBuilder();
            result.hasY = true;
            result.y_ = value;
            return this;
          }
          public Builder ClearY() {
            PrepareBuilder();
            result.hasY = false;
            result.y_ = 0;
            return this;
          }
        }
        static Point() {
          object.ReferenceEquals(global::common.message.Data.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class MoveRectangle : pb::GeneratedMessage<MoveRectangle, MoveRectangle.Builder> {
        private MoveRectangle() { }
        private static readonly MoveRectangle defaultInstance = new MoveRectangle().MakeReadOnly();
        private static readonly string[] _moveRectangleFieldNames = new string[] { "destinationRectangle", "sourcePoint" };
        private static readonly uint[] _moveRectangleFieldTags = new uint[] { 10, 18 };
        public static MoveRectangle DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override MoveRectangle DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override MoveRectangle ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::common.message.Data.internal__static_common_message_Video_MoveRectangle__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<MoveRectangle, MoveRectangle.Builder> InternalFieldAccessors {
          get { return global::common.message.Data.internal__static_common_message_Video_MoveRectangle__FieldAccessorTable; }
        }
        
        public const int DestinationRectangleFieldNumber = 1;
        private bool hasDestinationRectangle;
        private global::common.message.Video.Types.Rectangle destinationRectangle_;
        public bool HasDestinationRectangle {
          get { return hasDestinationRectangle; }
        }
        public global::common.message.Video.Types.Rectangle DestinationRectangle {
          get { return destinationRectangle_ ?? global::common.message.Video.Types.Rectangle.DefaultInstance; }
        }
        
        public const int SourcePointFieldNumber = 2;
        private bool hasSourcePoint;
        private global::common.message.Video.Types.Point sourcePoint_;
        public bool HasSourcePoint {
          get { return hasSourcePoint; }
        }
        public global::common.message.Video.Types.Point SourcePoint {
          get { return sourcePoint_ ?? global::common.message.Video.Types.Point.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasDestinationRectangle) return false;
            if (!hasSourcePoint) return false;
            if (!DestinationRectangle.IsInitialized) return false;
            if (!SourcePoint.IsInitialized) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _moveRectangleFieldNames;
          if (hasDestinationRectangle) {
            output.WriteMessage(1, field_names[0], DestinationRectangle);
          }
          if (hasSourcePoint) {
            output.WriteMessage(2, field_names[1], SourcePoint);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasDestinationRectangle) {
              size += pb::CodedOutputStream.ComputeMessageSize(1, DestinationRectangle);
            }
            if (hasSourcePoint) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, SourcePoint);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static MoveRectangle ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MoveRectangle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MoveRectangle ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MoveRectangle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MoveRectangle ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MoveRectangle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MoveRectangle ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MoveRectangle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MoveRectangle ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MoveRectangle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MoveRectangle MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MoveRectangle prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<MoveRectangle, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(MoveRectangle cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private MoveRectangle result;
          
          private MoveRectangle PrepareBuilder() {
            if (resultIsReadOnly) {
              MoveRectangle original = result;
              result = new MoveRectangle();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override MoveRectangle MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::common.message.Video.Types.MoveRectangle.Descriptor; }
          }
          
          public override MoveRectangle DefaultInstanceForType {
            get { return global::common.message.Video.Types.MoveRectangle.DefaultInstance; }
          }
          
          public override MoveRectangle BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is MoveRectangle) {
              return MergeFrom((MoveRectangle) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(MoveRectangle other) {
            if (other == global::common.message.Video.Types.MoveRectangle.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasDestinationRectangle) {
              MergeDestinationRectangle(other.DestinationRectangle);
            }
            if (other.HasSourcePoint) {
              MergeSourcePoint(other.SourcePoint);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_moveRectangleFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _moveRectangleFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  global::common.message.Video.Types.Rectangle.Builder subBuilder = global::common.message.Video.Types.Rectangle.CreateBuilder();
                  if (result.hasDestinationRectangle) {
                    subBuilder.MergeFrom(DestinationRectangle);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  DestinationRectangle = subBuilder.BuildPartial();
                  break;
                }
                case 18: {
                  global::common.message.Video.Types.Point.Builder subBuilder = global::common.message.Video.Types.Point.CreateBuilder();
                  if (result.hasSourcePoint) {
                    subBuilder.MergeFrom(SourcePoint);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  SourcePoint = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasDestinationRectangle {
           get { return result.hasDestinationRectangle; }
          }
          public global::common.message.Video.Types.Rectangle DestinationRectangle {
            get { return result.DestinationRectangle; }
            set { SetDestinationRectangle(value); }
          }
          public Builder SetDestinationRectangle(global::common.message.Video.Types.Rectangle value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDestinationRectangle = true;
            result.destinationRectangle_ = value;
            return this;
          }
          public Builder SetDestinationRectangle(global::common.message.Video.Types.Rectangle.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasDestinationRectangle = true;
            result.destinationRectangle_ = builderForValue.Build();
            return this;
          }
          public Builder MergeDestinationRectangle(global::common.message.Video.Types.Rectangle value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasDestinationRectangle &&
                result.destinationRectangle_ != global::common.message.Video.Types.Rectangle.DefaultInstance) {
                result.destinationRectangle_ = global::common.message.Video.Types.Rectangle.CreateBuilder(result.destinationRectangle_).MergeFrom(value).BuildPartial();
            } else {
              result.destinationRectangle_ = value;
            }
            result.hasDestinationRectangle = true;
            return this;
          }
          public Builder ClearDestinationRectangle() {
            PrepareBuilder();
            result.hasDestinationRectangle = false;
            result.destinationRectangle_ = null;
            return this;
          }
          
          public bool HasSourcePoint {
           get { return result.hasSourcePoint; }
          }
          public global::common.message.Video.Types.Point SourcePoint {
            get { return result.SourcePoint; }
            set { SetSourcePoint(value); }
          }
          public Builder SetSourcePoint(global::common.message.Video.Types.Point value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSourcePoint = true;
            result.sourcePoint_ = value;
            return this;
          }
          public Builder SetSourcePoint(global::common.message.Video.Types.Point.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasSourcePoint = true;
            result.sourcePoint_ = builderForValue.Build();
            return this;
          }
          public Builder MergeSourcePoint(global::common.message.Video.Types.Point value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasSourcePoint &&
                result.sourcePoint_ != global::common.message.Video.Types.Point.DefaultInstance) {
                result.sourcePoint_ = global::common.message.Video.Types.Point.CreateBuilder(result.sourcePoint_).MergeFrom(value).BuildPartial();
            } else {
              result.sourcePoint_ = value;
            }
            result.hasSourcePoint = true;
            return this;
          }
          public Builder ClearSourcePoint() {
            PrepareBuilder();
            result.hasSourcePoint = false;
            result.sourcePoint_ = null;
            return this;
          }
        }
        static MoveRectangle() {
          object.ReferenceEquals(global::common.message.Data.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int DirtyRectsFieldNumber = 1;
    private pbc::PopsicleList<global::common.message.Video.Types.Rectangle> dirtyRects_ = new pbc::PopsicleList<global::common.message.Video.Types.Rectangle>();
    public scg::IList<global::common.message.Video.Types.Rectangle> DirtyRectsList {
      get { return dirtyRects_; }
    }
    public int DirtyRectsCount {
      get { return dirtyRects_.Count; }
    }
    public global::common.message.Video.Types.Rectangle GetDirtyRects(int index) {
      return dirtyRects_[index];
    }
    
    public const int MoveRectsFieldNumber = 2;
    private pbc::PopsicleList<global::common.message.Video.Types.MoveRectangle> moveRects_ = new pbc::PopsicleList<global::common.message.Video.Types.MoveRectangle>();
    public scg::IList<global::common.message.Video.Types.MoveRectangle> MoveRectsList {
      get { return moveRects_; }
    }
    public int MoveRectsCount {
      get { return moveRects_.Count; }
    }
    public global::common.message.Video.Types.MoveRectangle GetMoveRects(int index) {
      return moveRects_[index];
    }
    
    public const int FrameFieldNumber = 3;
    private bool hasFrame;
    private pb::ByteString frame_ = pb::ByteString.Empty;
    public bool HasFrame {
      get { return hasFrame; }
    }
    public pb::ByteString Frame {
      get { return frame_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::common.message.Video.Types.Rectangle element in DirtyRectsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::common.message.Video.Types.MoveRectangle element in MoveRectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _videoFieldNames;
      if (dirtyRects_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], dirtyRects_);
      }
      if (moveRects_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], moveRects_);
      }
      if (hasFrame) {
        output.WriteBytes(3, field_names[1], Frame);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::common.message.Video.Types.Rectangle element in DirtyRectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::common.message.Video.Types.MoveRectangle element in MoveRectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasFrame) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Frame);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Video ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Video ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Video ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Video ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Video ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Video ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Video ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Video ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Video ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Video ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Video MakeReadOnly() {
      dirtyRects_.MakeReadOnly();
      moveRects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Video prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Video, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Video cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Video result;
      
      private Video PrepareBuilder() {
        if (resultIsReadOnly) {
          Video original = result;
          result = new Video();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Video MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Video.Descriptor; }
      }
      
      public override Video DefaultInstanceForType {
        get { return global::common.message.Video.DefaultInstance; }
      }
      
      public override Video BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Video) {
          return MergeFrom((Video) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Video other) {
        if (other == global::common.message.Video.DefaultInstance) return this;
        PrepareBuilder();
        if (other.dirtyRects_.Count != 0) {
          result.dirtyRects_.Add(other.dirtyRects_);
        }
        if (other.moveRects_.Count != 0) {
          result.moveRects_.Add(other.moveRects_);
        }
        if (other.HasFrame) {
          Frame = other.Frame;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_videoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _videoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.dirtyRects_, global::common.message.Video.Types.Rectangle.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.moveRects_, global::common.message.Video.Types.MoveRectangle.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              result.hasFrame = input.ReadBytes(ref result.frame_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::common.message.Video.Types.Rectangle> DirtyRectsList {
        get { return PrepareBuilder().dirtyRects_; }
      }
      public int DirtyRectsCount {
        get { return result.DirtyRectsCount; }
      }
      public global::common.message.Video.Types.Rectangle GetDirtyRects(int index) {
        return result.GetDirtyRects(index);
      }
      public Builder SetDirtyRects(int index, global::common.message.Video.Types.Rectangle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dirtyRects_[index] = value;
        return this;
      }
      public Builder SetDirtyRects(int index, global::common.message.Video.Types.Rectangle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dirtyRects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDirtyRects(global::common.message.Video.Types.Rectangle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dirtyRects_.Add(value);
        return this;
      }
      public Builder AddDirtyRects(global::common.message.Video.Types.Rectangle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dirtyRects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDirtyRects(scg::IEnumerable<global::common.message.Video.Types.Rectangle> values) {
        PrepareBuilder();
        result.dirtyRects_.Add(values);
        return this;
      }
      public Builder ClearDirtyRects() {
        PrepareBuilder();
        result.dirtyRects_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::common.message.Video.Types.MoveRectangle> MoveRectsList {
        get { return PrepareBuilder().moveRects_; }
      }
      public int MoveRectsCount {
        get { return result.MoveRectsCount; }
      }
      public global::common.message.Video.Types.MoveRectangle GetMoveRects(int index) {
        return result.GetMoveRects(index);
      }
      public Builder SetMoveRects(int index, global::common.message.Video.Types.MoveRectangle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.moveRects_[index] = value;
        return this;
      }
      public Builder SetMoveRects(int index, global::common.message.Video.Types.MoveRectangle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.moveRects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMoveRects(global::common.message.Video.Types.MoveRectangle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.moveRects_.Add(value);
        return this;
      }
      public Builder AddMoveRects(global::common.message.Video.Types.MoveRectangle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.moveRects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMoveRects(scg::IEnumerable<global::common.message.Video.Types.MoveRectangle> values) {
        PrepareBuilder();
        result.moveRects_.Add(values);
        return this;
      }
      public Builder ClearMoveRects() {
        PrepareBuilder();
        result.moveRects_.Clear();
        return this;
      }
      
      public bool HasFrame {
        get { return result.hasFrame; }
      }
      public pb::ByteString Frame {
        get { return result.Frame; }
        set { SetFrame(value); }
      }
      public Builder SetFrame(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrame = true;
        result.frame_ = value;
        return this;
      }
      public Builder ClearFrame() {
        PrepareBuilder();
        result.hasFrame = false;
        result.frame_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Video() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Audio : pb::GeneratedMessage<Audio, Audio.Builder> {
    private Audio() { }
    private static readonly Audio defaultInstance = new Audio().MakeReadOnly();
    private static readonly string[] _audioFieldNames = new string[] { "sound" };
    private static readonly uint[] _audioFieldTags = new uint[] { 10 };
    public static Audio DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Audio DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Audio ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Audio__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Audio, Audio.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Audio__FieldAccessorTable; }
    }
    
    public const int SoundFieldNumber = 1;
    private bool hasSound;
    private pb::ByteString sound_ = pb::ByteString.Empty;
    public bool HasSound {
      get { return hasSound; }
    }
    public pb::ByteString Sound {
      get { return sound_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _audioFieldNames;
      if (hasSound) {
        output.WriteBytes(1, field_names[0], Sound);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSound) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Sound);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Audio ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Audio ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Audio ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Audio ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Audio ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Audio ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Audio ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Audio ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Audio ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Audio ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Audio MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Audio prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Audio, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Audio cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Audio result;
      
      private Audio PrepareBuilder() {
        if (resultIsReadOnly) {
          Audio original = result;
          result = new Audio();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Audio MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Audio.Descriptor; }
      }
      
      public override Audio DefaultInstanceForType {
        get { return global::common.message.Audio.DefaultInstance; }
      }
      
      public override Audio BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Audio) {
          return MergeFrom((Audio) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Audio other) {
        if (other == global::common.message.Audio.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSound) {
          Sound = other.Sound;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_audioFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _audioFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSound = input.ReadBytes(ref result.sound_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSound {
        get { return result.hasSound; }
      }
      public pb::ByteString Sound {
        get { return result.Sound; }
        set { SetSound(value); }
      }
      public Builder SetSound(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSound = true;
        result.sound_ = value;
        return this;
      }
      public Builder ClearSound() {
        PrepareBuilder();
        result.hasSound = false;
        result.sound_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Audio() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeviceInfo : pb::GeneratedMessage<DeviceInfo, DeviceInfo.Builder> {
    private DeviceInfo() { }
    private static readonly DeviceInfo defaultInstance = new DeviceInfo().MakeReadOnly();
    private static readonly string[] _deviceInfoFieldNames = new string[] { "deviceName", "resolution" };
    private static readonly uint[] _deviceInfoFieldTags = new uint[] { 10, 18 };
    public static DeviceInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeviceInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeviceInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_DeviceInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeviceInfo, DeviceInfo.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_DeviceInfo__FieldAccessorTable; }
    }
    
    public const int DeviceNameFieldNumber = 1;
    private bool hasDeviceName;
    private pb::ByteString deviceName_ = pb::ByteString.Empty;
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public pb::ByteString DeviceName {
      get { return deviceName_; }
    }
    
    public const int ResolutionFieldNumber = 2;
    private bool hasResolution;
    private global::common.message.Resolution resolution_;
    public bool HasResolution {
      get { return hasResolution; }
    }
    public global::common.message.Resolution Resolution {
      get { return resolution_ ?? global::common.message.Resolution.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deviceInfoFieldNames;
      if (hasDeviceName) {
        output.WriteBytes(1, field_names[0], DeviceName);
      }
      if (hasResolution) {
        output.WriteMessage(2, field_names[1], Resolution);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, DeviceName);
        }
        if (hasResolution) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Resolution);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeviceInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeviceInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeviceInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeviceInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeviceInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeviceInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeviceInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeviceInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeviceInfo result;
      
      private DeviceInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          DeviceInfo original = result;
          result = new DeviceInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeviceInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.DeviceInfo.Descriptor; }
      }
      
      public override DeviceInfo DefaultInstanceForType {
        get { return global::common.message.DeviceInfo.DefaultInstance; }
      }
      
      public override DeviceInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeviceInfo) {
          return MergeFrom((DeviceInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeviceInfo other) {
        if (other == global::common.message.DeviceInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        if (other.HasResolution) {
          MergeResolution(other.Resolution);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deviceInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deviceInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDeviceName = input.ReadBytes(ref result.deviceName_);
              break;
            }
            case 18: {
              global::common.message.Resolution.Builder subBuilder = global::common.message.Resolution.CreateBuilder();
              if (result.hasResolution) {
                subBuilder.MergeFrom(Resolution);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Resolution = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public pb::ByteString DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasResolution {
       get { return result.hasResolution; }
      }
      public global::common.message.Resolution Resolution {
        get { return result.Resolution; }
        set { SetResolution(value); }
      }
      public Builder SetResolution(global::common.message.Resolution value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResolution = true;
        result.resolution_ = value;
        return this;
      }
      public Builder SetResolution(global::common.message.Resolution.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResolution = true;
        result.resolution_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResolution(global::common.message.Resolution value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResolution &&
            result.resolution_ != global::common.message.Resolution.DefaultInstance) {
            result.resolution_ = global::common.message.Resolution.CreateBuilder(result.resolution_).MergeFrom(value).BuildPartial();
        } else {
          result.resolution_ = value;
        }
        result.hasResolution = true;
        return this;
      }
      public Builder ClearResolution() {
        PrepareBuilder();
        result.hasResolution = false;
        result.resolution_ = null;
        return this;
      }
    }
    static DeviceInfo() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Resolution : pb::GeneratedMessage<Resolution, Resolution.Builder> {
    private Resolution() { }
    private static readonly Resolution defaultInstance = new Resolution().MakeReadOnly();
    private static readonly string[] _resolutionFieldNames = new string[] { "height", "width" };
    private static readonly uint[] _resolutionFieldTags = new uint[] { 16, 8 };
    public static Resolution DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Resolution DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Resolution ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Resolution__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Resolution, Resolution.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Resolution__FieldAccessorTable; }
    }
    
    public const int WidthFieldNumber = 1;
    private bool hasWidth;
    private int width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public int Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 2;
    private bool hasHeight;
    private int height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public int Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resolutionFieldNames;
      if (hasWidth) {
        output.WriteInt32(1, field_names[1], Width);
      }
      if (hasHeight) {
        output.WriteInt32(2, field_names[0], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Resolution ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Resolution ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Resolution ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Resolution ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Resolution ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Resolution ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Resolution ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Resolution ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Resolution ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Resolution ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Resolution MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Resolution prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Resolution, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Resolution cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Resolution result;
      
      private Resolution PrepareBuilder() {
        if (resultIsReadOnly) {
          Resolution original = result;
          result = new Resolution();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Resolution MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Resolution.Descriptor; }
      }
      
      public override Resolution DefaultInstanceForType {
        get { return global::common.message.Resolution.DefaultInstance; }
      }
      
      public override Resolution BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Resolution) {
          return MergeFrom((Resolution) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Resolution other) {
        if (other == global::common.message.Resolution.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resolutionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resolutionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWidth = input.ReadInt32(ref result.width_);
              break;
            }
            case 16: {
              result.hasHeight = input.ReadInt32(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
    }
    static Resolution() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FileRequest : pb::GeneratedMessage<FileRequest, FileRequest.Builder> {
    private FileRequest() { }
    private static readonly FileRequest defaultInstance = new FileRequest().MakeReadOnly();
    private static readonly string[] _fileRequestFieldNames = new string[] { "filePath", "fileRequestType" };
    private static readonly uint[] _fileRequestFieldTags = new uint[] { 18, 8 };
    public static FileRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FileRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FileRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_FileRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FileRequest, FileRequest.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_FileRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum FileRequestType {
        OpenFileRemotely = 1,
        DeleteFile = 2,
        SaveFile = 3,
        SendFile = 4,
      }
      
    }
    #endregion
    
    public const int FileRequestTypeFieldNumber = 1;
    private bool hasFileRequestType;
    private global::common.message.FileRequest.Types.FileRequestType fileRequestType_ = global::common.message.FileRequest.Types.FileRequestType.OpenFileRemotely;
    public bool HasFileRequestType {
      get { return hasFileRequestType; }
    }
    public global::common.message.FileRequest.Types.FileRequestType FileRequestType {
      get { return fileRequestType_; }
    }
    
    public const int FilePathFieldNumber = 2;
    private bool hasFilePath;
    private pb::ByteString filePath_ = pb::ByteString.Empty;
    public bool HasFilePath {
      get { return hasFilePath; }
    }
    public pb::ByteString FilePath {
      get { return filePath_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileRequestType) return false;
        if (!hasFilePath) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fileRequestFieldNames;
      if (hasFileRequestType) {
        output.WriteEnum(1, field_names[1], (int) FileRequestType, FileRequestType);
      }
      if (hasFilePath) {
        output.WriteBytes(2, field_names[0], FilePath);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFileRequestType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) FileRequestType);
        }
        if (hasFilePath) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, FilePath);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FileRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FileRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FileRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FileRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FileRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FileRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FileRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FileRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FileRequest result;
      
      private FileRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          FileRequest original = result;
          result = new FileRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FileRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.FileRequest.Descriptor; }
      }
      
      public override FileRequest DefaultInstanceForType {
        get { return global::common.message.FileRequest.DefaultInstance; }
      }
      
      public override FileRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FileRequest) {
          return MergeFrom((FileRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FileRequest other) {
        if (other == global::common.message.FileRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileRequestType) {
          FileRequestType = other.FileRequestType;
        }
        if (other.HasFilePath) {
          FilePath = other.FilePath;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fileRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fileRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.fileRequestType_, out unknown)) {
                result.hasFileRequestType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasFilePath = input.ReadBytes(ref result.filePath_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileRequestType {
       get { return result.hasFileRequestType; }
      }
      public global::common.message.FileRequest.Types.FileRequestType FileRequestType {
        get { return result.FileRequestType; }
        set { SetFileRequestType(value); }
      }
      public Builder SetFileRequestType(global::common.message.FileRequest.Types.FileRequestType value) {
        PrepareBuilder();
        result.hasFileRequestType = true;
        result.fileRequestType_ = value;
        return this;
      }
      public Builder ClearFileRequestType() {
        PrepareBuilder();
        result.hasFileRequestType = false;
        result.fileRequestType_ = global::common.message.FileRequest.Types.FileRequestType.OpenFileRemotely;
        return this;
      }
      
      public bool HasFilePath {
        get { return result.hasFilePath; }
      }
      public pb::ByteString FilePath {
        get { return result.FilePath; }
        set { SetFilePath(value); }
      }
      public Builder SetFilePath(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilePath = true;
        result.filePath_ = value;
        return this;
      }
      public Builder ClearFilePath() {
        PrepareBuilder();
        result.hasFilePath = false;
        result.filePath_ = pb::ByteString.Empty;
        return this;
      }
    }
    static FileRequest() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FileInfo : pb::GeneratedMessage<FileInfo, FileInfo.Builder> {
    private FileInfo() { }
    private static readonly FileInfo defaultInstance = new FileInfo().MakeReadOnly();
    private static readonly string[] _fileInfoFieldNames = new string[] { "fileIcon", "filePath", "fileSize" };
    private static readonly uint[] _fileInfoFieldTags = new uint[] { 26, 10, 16 };
    public static FileInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FileInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FileInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_FileInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FileInfo, FileInfo.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_FileInfo__FieldAccessorTable; }
    }
    
    public const int FilePathFieldNumber = 1;
    private bool hasFilePath;
    private pb::ByteString filePath_ = pb::ByteString.Empty;
    public bool HasFilePath {
      get { return hasFilePath; }
    }
    public pb::ByteString FilePath {
      get { return filePath_; }
    }
    
    public const int FileSizeFieldNumber = 2;
    private bool hasFileSize;
    private ulong fileSize_;
    public bool HasFileSize {
      get { return hasFileSize; }
    }
    [global::System.CLSCompliant(false)]
    public ulong FileSize {
      get { return fileSize_; }
    }
    
    public const int FileIconFieldNumber = 3;
    private bool hasFileIcon;
    private pb::ByteString fileIcon_ = pb::ByteString.Empty;
    public bool HasFileIcon {
      get { return hasFileIcon; }
    }
    public pb::ByteString FileIcon {
      get { return fileIcon_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFilePath) return false;
        if (!hasFileSize) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fileInfoFieldNames;
      if (hasFilePath) {
        output.WriteBytes(1, field_names[1], FilePath);
      }
      if (hasFileSize) {
        output.WriteUInt64(2, field_names[2], FileSize);
      }
      if (hasFileIcon) {
        output.WriteBytes(3, field_names[0], FileIcon);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFilePath) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, FilePath);
        }
        if (hasFileSize) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, FileSize);
        }
        if (hasFileIcon) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, FileIcon);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FileInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FileInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FileInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FileInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FileInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FileInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FileInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FileInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FileInfo result;
      
      private FileInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          FileInfo original = result;
          result = new FileInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FileInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.FileInfo.Descriptor; }
      }
      
      public override FileInfo DefaultInstanceForType {
        get { return global::common.message.FileInfo.DefaultInstance; }
      }
      
      public override FileInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FileInfo) {
          return MergeFrom((FileInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FileInfo other) {
        if (other == global::common.message.FileInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFilePath) {
          FilePath = other.FilePath;
        }
        if (other.HasFileSize) {
          FileSize = other.FileSize;
        }
        if (other.HasFileIcon) {
          FileIcon = other.FileIcon;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fileInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fileInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFilePath = input.ReadBytes(ref result.filePath_);
              break;
            }
            case 16: {
              result.hasFileSize = input.ReadUInt64(ref result.fileSize_);
              break;
            }
            case 26: {
              result.hasFileIcon = input.ReadBytes(ref result.fileIcon_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFilePath {
        get { return result.hasFilePath; }
      }
      public pb::ByteString FilePath {
        get { return result.FilePath; }
        set { SetFilePath(value); }
      }
      public Builder SetFilePath(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilePath = true;
        result.filePath_ = value;
        return this;
      }
      public Builder ClearFilePath() {
        PrepareBuilder();
        result.hasFilePath = false;
        result.filePath_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasFileSize {
        get { return result.hasFileSize; }
      }
      [global::System.CLSCompliant(false)]
      public ulong FileSize {
        get { return result.FileSize; }
        set { SetFileSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFileSize(ulong value) {
        PrepareBuilder();
        result.hasFileSize = true;
        result.fileSize_ = value;
        return this;
      }
      public Builder ClearFileSize() {
        PrepareBuilder();
        result.hasFileSize = false;
        result.fileSize_ = 0UL;
        return this;
      }
      
      public bool HasFileIcon {
        get { return result.hasFileIcon; }
      }
      public pb::ByteString FileIcon {
        get { return result.FileIcon; }
        set { SetFileIcon(value); }
      }
      public Builder SetFileIcon(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileIcon = true;
        result.fileIcon_ = value;
        return this;
      }
      public Builder ClearFileIcon() {
        PrepareBuilder();
        result.hasFileIcon = false;
        result.fileIcon_ = pb::ByteString.Empty;
        return this;
      }
    }
    static FileInfo() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FileBlock : pb::GeneratedMessage<FileBlock, FileBlock.Builder> {
    private FileBlock() { }
    private static readonly FileBlock defaultInstance = new FileBlock().MakeReadOnly();
    private static readonly string[] _fileBlockFieldNames = new string[] { "content" };
    private static readonly uint[] _fileBlockFieldTags = new uint[] { 10 };
    public static FileBlock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FileBlock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FileBlock ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_FileBlock__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FileBlock, FileBlock.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_FileBlock__FieldAccessorTable; }
    }
    
    public const int ContentFieldNumber = 1;
    private bool hasContent;
    private pb::ByteString content_ = pb::ByteString.Empty;
    public bool HasContent {
      get { return hasContent; }
    }
    public pb::ByteString Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fileBlockFieldNames;
      if (hasContent) {
        output.WriteBytes(1, field_names[0], Content);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Content);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FileBlock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileBlock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileBlock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileBlock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileBlock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileBlock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FileBlock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FileBlock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FileBlock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileBlock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FileBlock MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FileBlock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FileBlock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FileBlock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FileBlock result;
      
      private FileBlock PrepareBuilder() {
        if (resultIsReadOnly) {
          FileBlock original = result;
          result = new FileBlock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FileBlock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.FileBlock.Descriptor; }
      }
      
      public override FileBlock DefaultInstanceForType {
        get { return global::common.message.FileBlock.DefaultInstance; }
      }
      
      public override FileBlock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FileBlock) {
          return MergeFrom((FileBlock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FileBlock other) {
        if (other == global::common.message.FileBlock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContent) {
          Content = other.Content;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fileBlockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fileBlockFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasContent = input.ReadBytes(ref result.content_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public pb::ByteString Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = pb::ByteString.Empty;
        return this;
      }
    }
    static FileBlock() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CloudStorageTokenRequest : pb::GeneratedMessage<CloudStorageTokenRequest, CloudStorageTokenRequest.Builder> {
    private CloudStorageTokenRequest() { }
    private static readonly CloudStorageTokenRequest defaultInstance = new CloudStorageTokenRequest().MakeReadOnly();
    private static readonly string[] _cloudStorageTokenRequestFieldNames = new string[] { "expires" };
    private static readonly uint[] _cloudStorageTokenRequestFieldTags = new uint[] { 8 };
    public static CloudStorageTokenRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CloudStorageTokenRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CloudStorageTokenRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_CloudStorageTokenRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CloudStorageTokenRequest, CloudStorageTokenRequest.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_CloudStorageTokenRequest__FieldAccessorTable; }
    }
    
    public const int ExpiresFieldNumber = 1;
    private bool hasExpires;
    private int expires_ = 3600;
    public bool HasExpires {
      get { return hasExpires; }
    }
    public int Expires {
      get { return expires_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cloudStorageTokenRequestFieldNames;
      if (hasExpires) {
        output.WriteInt32(1, field_names[0], Expires);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasExpires) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Expires);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CloudStorageTokenRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CloudStorageTokenRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CloudStorageTokenRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CloudStorageTokenRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CloudStorageTokenRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CloudStorageTokenRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CloudStorageTokenRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CloudStorageTokenRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CloudStorageTokenRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CloudStorageTokenRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CloudStorageTokenRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CloudStorageTokenRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CloudStorageTokenRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CloudStorageTokenRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CloudStorageTokenRequest result;
      
      private CloudStorageTokenRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CloudStorageTokenRequest original = result;
          result = new CloudStorageTokenRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CloudStorageTokenRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.CloudStorageTokenRequest.Descriptor; }
      }
      
      public override CloudStorageTokenRequest DefaultInstanceForType {
        get { return global::common.message.CloudStorageTokenRequest.DefaultInstance; }
      }
      
      public override CloudStorageTokenRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CloudStorageTokenRequest) {
          return MergeFrom((CloudStorageTokenRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CloudStorageTokenRequest other) {
        if (other == global::common.message.CloudStorageTokenRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExpires) {
          Expires = other.Expires;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cloudStorageTokenRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cloudStorageTokenRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasExpires = input.ReadInt32(ref result.expires_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExpires {
        get { return result.hasExpires; }
      }
      public int Expires {
        get { return result.Expires; }
        set { SetExpires(value); }
      }
      public Builder SetExpires(int value) {
        PrepareBuilder();
        result.hasExpires = true;
        result.expires_ = value;
        return this;
      }
      public Builder ClearExpires() {
        PrepareBuilder();
        result.hasExpires = false;
        result.expires_ = 3600;
        return this;
      }
    }
    static CloudStorageTokenRequest() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CloudStorageToken : pb::GeneratedMessage<CloudStorageToken, CloudStorageToken.Builder> {
    private CloudStorageToken() { }
    private static readonly CloudStorageToken defaultInstance = new CloudStorageToken().MakeReadOnly();
    private static readonly string[] _cloudStorageTokenFieldNames = new string[] { "token" };
    private static readonly uint[] _cloudStorageTokenFieldTags = new uint[] { 10 };
    public static CloudStorageToken DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CloudStorageToken DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CloudStorageToken ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_CloudStorageToken__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CloudStorageToken, CloudStorageToken.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_CloudStorageToken__FieldAccessorTable; }
    }
    
    public const int TokenFieldNumber = 1;
    private bool hasToken;
    private pb::ByteString token_ = pb::ByteString.Empty;
    public bool HasToken {
      get { return hasToken; }
    }
    public pb::ByteString Token {
      get { return token_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToken) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cloudStorageTokenFieldNames;
      if (hasToken) {
        output.WriteBytes(1, field_names[0], Token);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Token);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CloudStorageToken ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CloudStorageToken ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CloudStorageToken ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CloudStorageToken ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CloudStorageToken ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CloudStorageToken ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CloudStorageToken ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CloudStorageToken ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CloudStorageToken ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CloudStorageToken ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CloudStorageToken MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CloudStorageToken prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CloudStorageToken, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CloudStorageToken cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CloudStorageToken result;
      
      private CloudStorageToken PrepareBuilder() {
        if (resultIsReadOnly) {
          CloudStorageToken original = result;
          result = new CloudStorageToken();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CloudStorageToken MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.CloudStorageToken.Descriptor; }
      }
      
      public override CloudStorageToken DefaultInstanceForType {
        get { return global::common.message.CloudStorageToken.DefaultInstance; }
      }
      
      public override CloudStorageToken BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CloudStorageToken) {
          return MergeFrom((CloudStorageToken) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CloudStorageToken other) {
        if (other == global::common.message.CloudStorageToken.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToken) {
          Token = other.Token;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cloudStorageTokenFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cloudStorageTokenFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasToken = input.ReadBytes(ref result.token_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public pb::ByteString Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = pb::ByteString.Empty;
        return this;
      }
    }
    static CloudStorageToken() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SharedMessage : pb::GeneratedMessage<SharedMessage, SharedMessage.Builder> {
    private SharedMessage() { }
    private static readonly SharedMessage defaultInstance = new SharedMessage().MakeReadOnly();
    private static readonly string[] _sharedMessageFieldNames = new string[] { "content" };
    private static readonly uint[] _sharedMessageFieldTags = new uint[] { 10 };
    public static SharedMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SharedMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SharedMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_SharedMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SharedMessage, SharedMessage.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_SharedMessage__FieldAccessorTable; }
    }
    
    public const int ContentFieldNumber = 1;
    private bool hasContent;
    private pb::ByteString content_ = pb::ByteString.Empty;
    public bool HasContent {
      get { return hasContent; }
    }
    public pb::ByteString Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sharedMessageFieldNames;
      if (hasContent) {
        output.WriteBytes(1, field_names[0], Content);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Content);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SharedMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SharedMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SharedMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SharedMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SharedMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SharedMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SharedMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SharedMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SharedMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SharedMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SharedMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SharedMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SharedMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SharedMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SharedMessage result;
      
      private SharedMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SharedMessage original = result;
          result = new SharedMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SharedMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.SharedMessage.Descriptor; }
      }
      
      public override SharedMessage DefaultInstanceForType {
        get { return global::common.message.SharedMessage.DefaultInstance; }
      }
      
      public override SharedMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SharedMessage) {
          return MergeFrom((SharedMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SharedMessage other) {
        if (other == global::common.message.SharedMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContent) {
          Content = other.Content;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sharedMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sharedMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasContent = input.ReadBytes(ref result.content_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public pb::ByteString Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = pb::ByteString.Empty;
        return this;
      }
    }
    static SharedMessage() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class KeyboardEvent : pb::GeneratedMessage<KeyboardEvent, KeyboardEvent.Builder> {
    private KeyboardEvent() { }
    private static readonly KeyboardEvent defaultInstance = new KeyboardEvent().MakeReadOnly();
    private static readonly string[] _keyboardEventFieldNames = new string[] { "keyCode" };
    private static readonly uint[] _keyboardEventFieldTags = new uint[] { 8 };
    public static KeyboardEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override KeyboardEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override KeyboardEvent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_KeyboardEvent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<KeyboardEvent, KeyboardEvent.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_KeyboardEvent__FieldAccessorTable; }
    }
    
    public const int KeyCodeFieldNumber = 1;
    private bool hasKeyCode;
    private int keyCode_;
    public bool HasKeyCode {
      get { return hasKeyCode; }
    }
    public int KeyCode {
      get { return keyCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKeyCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _keyboardEventFieldNames;
      if (hasKeyCode) {
        output.WriteInt32(1, field_names[0], KeyCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKeyCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, KeyCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static KeyboardEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static KeyboardEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static KeyboardEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private KeyboardEvent MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(KeyboardEvent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<KeyboardEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(KeyboardEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private KeyboardEvent result;
      
      private KeyboardEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          KeyboardEvent original = result;
          result = new KeyboardEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override KeyboardEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.KeyboardEvent.Descriptor; }
      }
      
      public override KeyboardEvent DefaultInstanceForType {
        get { return global::common.message.KeyboardEvent.DefaultInstance; }
      }
      
      public override KeyboardEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is KeyboardEvent) {
          return MergeFrom((KeyboardEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(KeyboardEvent other) {
        if (other == global::common.message.KeyboardEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKeyCode) {
          KeyCode = other.KeyCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_keyboardEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _keyboardEventFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKeyCode = input.ReadInt32(ref result.keyCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKeyCode {
        get { return result.hasKeyCode; }
      }
      public int KeyCode {
        get { return result.KeyCode; }
        set { SetKeyCode(value); }
      }
      public Builder SetKeyCode(int value) {
        PrepareBuilder();
        result.hasKeyCode = true;
        result.keyCode_ = value;
        return this;
      }
      public Builder ClearKeyCode() {
        PrepareBuilder();
        result.hasKeyCode = false;
        result.keyCode_ = 0;
        return this;
      }
    }
    static KeyboardEvent() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
