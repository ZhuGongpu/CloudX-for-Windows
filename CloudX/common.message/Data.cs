// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace common.message {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Data {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_common_message_DataPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.DataPacket, global::common.message.DataPacket.Builder> internal__static_common_message_DataPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Command__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Command, global::common.message.Command.Builder> internal__static_common_message_Command__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Video__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Video, global::common.message.Video.Builder> internal__static_common_message_Video__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Audio__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Audio, global::common.message.Audio.Builder> internal__static_common_message_Audio__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Info, global::common.message.Info.Builder> internal__static_common_message_Info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Resolution__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Resolution, global::common.message.Resolution.Builder> internal__static_common_message_Resolution__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.Request, global::common.message.Request.Builder> internal__static_common_message_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_RequestFeedback__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.RequestFeedback, global::common.message.RequestFeedback.Builder> internal__static_common_message_RequestFeedback__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_SharedFile__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.SharedFile, global::common.message.SharedFile.Builder> internal__static_common_message_SharedFile__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_SharedMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.SharedMessage, global::common.message.SharedMessage.Builder> internal__static_common_message_SharedMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_common_message_KeyboardEvent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::common.message.KeyboardEvent, global::common.message.KeyboardEvent.Builder> internal__static_common_message_KeyboardEvent__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Data() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgpkYXRhLnByb3RvEg5jb21tb24ubWVzc2FnZSKlBQoKRGF0YVBhY2tldBJB" + 
          "Cg5kYXRhUGFja2V0VHlwZRgBIAIoDjIpLmNvbW1vbi5tZXNzYWdlLkRhdGFQ" + 
          "YWNrZXQuRGF0YVBhY2tldFR5cGUSIgoEaW5mbxgCIAEoCzIULmNvbW1vbi5t" + 
          "ZXNzYWdlLkluZm8SJAoFdmlkZW8YAyABKAsyFS5jb21tb24ubWVzc2FnZS5W" + 
          "aWRlbxIkCgVhdWRpbxgEIAEoCzIVLmNvbW1vbi5tZXNzYWdlLkF1ZGlvEigK" + 
          "B2NvbW1hbmQYBSABKAsyFy5jb21tb24ubWVzc2FnZS5Db21tYW5kEigKB3Jl" + 
          "cXVlc3QYBiABKAsyFy5jb21tb24ubWVzc2FnZS5SZXF1ZXN0EjgKD3JlcXVl" + 
          "c3RGZWVkYmFjaxgHIAEoCzIfLmNvbW1vbi5tZXNzYWdlLlJlcXVlc3RGZWVk" + 
          "YmFjaxI0Cg1zaGFyZWRNZXNzYWdlGAggASgLMh0uY29tbW9uLm1lc3NhZ2Uu" + 
          "U2hhcmVkTWVzc2FnZRIuCgpzaGFyZWRGaWxlGAkgASgLMhouY29tbW9uLm1l" + 
          "c3NhZ2UuU2hhcmVkRmlsZRI0Cg1rZXlib2FyZEV2ZW50GAogASgLMh0uY29t" + 
          "bW9uLm1lc3NhZ2UuS2V5Ym9hcmRFdmVudBIRCgl0aW1lU3RhbXAYCyABKAwi" + 
          "pgEKDkRhdGFQYWNrZXRUeXBlEggKBEluZm8QARIJCgVWaWRlbxACEgkKBUF1" + 
          "ZGlvEAMSCwoHQ29tbWFuZBAEEgsKB1JlcXVlc3QQBRITCg9SZXF1ZXN0RmVl" + 
          "ZGJhY2sQBhIRCg1TaGFyZWRNZXNzYWdlEAcSDgoKU2hhcmVkRmlsZRAIEg8K" + 
          "C0ZpbmRNeVBob25lEAkSEQoNS2V5Ym9hcmRFdmVudBAKIosDCgdDb21tYW5k" + 
          "EjgKC2NvbW1hbmRUeXBlGAEgAigOMiMuY29tbW9uLm1lc3NhZ2UuQ29tbWFu" + 
          "ZC5Db21tYW5kVHlwZRIJCgF4GAIgASgCEgkKAXkYAyABKAIirwIKC0NvbW1h" + 
          "bmRUeXBlEgwKCE1pbmltaXplEAESDwoLU2hvd0Rlc2t0b3AQAhIPCgtTaHV0" + 
          "RG93bkFwcBADEg0KCUxlZnRDbGljaxAEEg4KClJpZ2h0Q2xpY2sQBRIKCgZT" + 
          "Y3JvbGwQBhIQCgxTZWxlY3RXaW5kb3cQBxIZChVTdG9wQXVkaW9UcmFuc21p" + 
          "c3Npb24QCBIZChVTdG9wVmlkZW9UcmFuc21pc3Npb24QCRIhCh1TdG9wQXVk" + 
          "aW9BbmRWaWRlb1RyYW5zbWlzc2lvbhAKEhoKFlN0YXJ0QXVkaW9UcmFuc21p" + 
          "c3Npb24QCxIaChZTdGFydFZpZGVvVHJhbnNtaXNzaW9uEAwSIgoeU3RhcnRB" + 
          "dWRpb0FuZFZpZGVvVHJhbnNtaXNzaW9uEA0iFgoFVmlkZW8SDQoFaW1hZ2UY" + 
          "ASABKAwiFgoFQXVkaW8SDQoFc291bmQYASABKAwitAEKBEluZm8SLwoIaW5m" + 
          "b1R5cGUYASACKA4yHS5jb21tb24ubWVzc2FnZS5JbmZvLkluZm9UeXBlEhIK" + 
          "CmRldmljZU5hbWUYAiABKAwSDQoFd2lkdGgYAyABKAUSDgoGaGVpZ2h0GAQg" + 
          "ASgFEhUKDXBvcnRMaXN0ZW5pbmcYBSABKAUiMQoISW5mb1R5cGUSCQoFTG9n" + 
          "aW4QARIKCgZMb2dvdXQQAhIOCgpOb3JtYWxJbmZvEAMiKwoKUmVzb2x1dGlv" + 
          "bhINCgV3aWR0aBgBIAEoBRIOCgZoZWlnaHQYAiABKAUi8QEKB1JlcXVlc3QS" + 
          "OAoLcmVxdWVzdFR5cGUYASACKA4yIy5jb21tb24ubWVzc2FnZS5SZXF1ZXN0" + 
          "LlJlcXVlc3RUeXBlEhAKCGZpbGVQYXRoGAIgAigMIpkBCgtSZXF1ZXN0VHlw" + 
          "ZRIJCgVNb3ZpZRABEgkKBU11c2ljEAISCAoERmlsZRADEg8KC1JlbW92ZU1v" + 
          "dmllEAQSDwoLUmVtb3ZlTXVzaWMQBRIOCgpSZW1vdmVGaWxlEAYSDAoIU2F2" + 
          "ZUZpbGUQBxINCglTYXZlTXVzaWMQCBINCglTYXZlTW92aWUQCRIMCghTZW5k" + 
          "RmlsZRAKIiMKD1JlcXVlc3RGZWVkYmFjaxIQCghmaWxlUGF0aBgBIAIoDCJD" + 
          "CgpTaGFyZWRGaWxlEhAKCGZpbGVOYW1lGAEgASgMEhIKCmZpbGVMZW5ndGgY" + 
          "AiACKAMSDwoHY29udGVudBgDIAIoDCIgCg1TaGFyZWRNZXNzYWdlEg8KB2Nv" + 
          "bnRlbnQYASACKAwiIAoNS2V5Ym9hcmRFdmVudBIPCgdrZXlDb2RlGAEgAigF");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_common_message_DataPacket__Descriptor = Descriptor.MessageTypes[0];
        internal__static_common_message_DataPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.DataPacket, global::common.message.DataPacket.Builder>(internal__static_common_message_DataPacket__Descriptor,
                new string[] { "DataPacketType", "Info", "Video", "Audio", "Command", "Request", "RequestFeedback", "SharedMessage", "SharedFile", "KeyboardEvent", "TimeStamp", });
        internal__static_common_message_Command__Descriptor = Descriptor.MessageTypes[1];
        internal__static_common_message_Command__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Command, global::common.message.Command.Builder>(internal__static_common_message_Command__Descriptor,
                new string[] { "CommandType", "X", "Y", });
        internal__static_common_message_Video__Descriptor = Descriptor.MessageTypes[2];
        internal__static_common_message_Video__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Video, global::common.message.Video.Builder>(internal__static_common_message_Video__Descriptor,
                new string[] { "Image", });
        internal__static_common_message_Audio__Descriptor = Descriptor.MessageTypes[3];
        internal__static_common_message_Audio__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Audio, global::common.message.Audio.Builder>(internal__static_common_message_Audio__Descriptor,
                new string[] { "Sound", });
        internal__static_common_message_Info__Descriptor = Descriptor.MessageTypes[4];
        internal__static_common_message_Info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Info, global::common.message.Info.Builder>(internal__static_common_message_Info__Descriptor,
                new string[] { "InfoType", "DeviceName", "Width", "Height", "PortListening", });
        internal__static_common_message_Resolution__Descriptor = Descriptor.MessageTypes[5];
        internal__static_common_message_Resolution__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Resolution, global::common.message.Resolution.Builder>(internal__static_common_message_Resolution__Descriptor,
                new string[] { "Width", "Height", });
        internal__static_common_message_Request__Descriptor = Descriptor.MessageTypes[6];
        internal__static_common_message_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.Request, global::common.message.Request.Builder>(internal__static_common_message_Request__Descriptor,
                new string[] { "RequestType", "FilePath", });
        internal__static_common_message_RequestFeedback__Descriptor = Descriptor.MessageTypes[7];
        internal__static_common_message_RequestFeedback__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.RequestFeedback, global::common.message.RequestFeedback.Builder>(internal__static_common_message_RequestFeedback__Descriptor,
                new string[] { "FilePath", });
        internal__static_common_message_SharedFile__Descriptor = Descriptor.MessageTypes[8];
        internal__static_common_message_SharedFile__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.SharedFile, global::common.message.SharedFile.Builder>(internal__static_common_message_SharedFile__Descriptor,
                new string[] { "FileName", "FileLength", "Content", });
        internal__static_common_message_SharedMessage__Descriptor = Descriptor.MessageTypes[9];
        internal__static_common_message_SharedMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.SharedMessage, global::common.message.SharedMessage.Builder>(internal__static_common_message_SharedMessage__Descriptor,
                new string[] { "Content", });
        internal__static_common_message_KeyboardEvent__Descriptor = Descriptor.MessageTypes[10];
        internal__static_common_message_KeyboardEvent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::common.message.KeyboardEvent, global::common.message.KeyboardEvent.Builder>(internal__static_common_message_KeyboardEvent__Descriptor,
                new string[] { "KeyCode", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataPacket : pb::GeneratedMessage<DataPacket, DataPacket.Builder> {
    private DataPacket() { }
    private static readonly DataPacket defaultInstance = new DataPacket().MakeReadOnly();
    private static readonly string[] _dataPacketFieldNames = new string[] { "audio", "command", "dataPacketType", "info", "keyboardEvent", "request", "requestFeedback", "sharedFile", "sharedMessage", "timeStamp", "video" };
    private static readonly uint[] _dataPacketFieldTags = new uint[] { 34, 42, 8, 18, 82, 50, 58, 74, 66, 90, 26 };
    public static DataPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_DataPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataPacket, DataPacket.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_DataPacket__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum DataPacketType {
        Info = 1,
        Video = 2,
        Audio = 3,
        Command = 4,
        Request = 5,
        RequestFeedback = 6,
        SharedMessage = 7,
        SharedFile = 8,
        FindMyPhone = 9,
        KeyboardEvent = 10,
      }
      
    }
    #endregion
    
    public const int DataPacketTypeFieldNumber = 1;
    private bool hasDataPacketType;
    private global::common.message.DataPacket.Types.DataPacketType dataPacketType_ = global::common.message.DataPacket.Types.DataPacketType.Info;
    public bool HasDataPacketType {
      get { return hasDataPacketType; }
    }
    public global::common.message.DataPacket.Types.DataPacketType DataPacketType {
      get { return dataPacketType_; }
    }
    
    public const int InfoFieldNumber = 2;
    private bool hasInfo;
    private global::common.message.Info info_;
    public bool HasInfo {
      get { return hasInfo; }
    }
    public global::common.message.Info Info {
      get { return info_ ?? global::common.message.Info.DefaultInstance; }
    }
    
    public const int VideoFieldNumber = 3;
    private bool hasVideo;
    private global::common.message.Video video_;
    public bool HasVideo {
      get { return hasVideo; }
    }
    public global::common.message.Video Video {
      get { return video_ ?? global::common.message.Video.DefaultInstance; }
    }
    
    public const int AudioFieldNumber = 4;
    private bool hasAudio;
    private global::common.message.Audio audio_;
    public bool HasAudio {
      get { return hasAudio; }
    }
    public global::common.message.Audio Audio {
      get { return audio_ ?? global::common.message.Audio.DefaultInstance; }
    }
    
    public const int CommandFieldNumber = 5;
    private bool hasCommand;
    private global::common.message.Command command_;
    public bool HasCommand {
      get { return hasCommand; }
    }
    public global::common.message.Command Command {
      get { return command_ ?? global::common.message.Command.DefaultInstance; }
    }
    
    public const int RequestFieldNumber = 6;
    private bool hasRequest;
    private global::common.message.Request request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::common.message.Request Request {
      get { return request_ ?? global::common.message.Request.DefaultInstance; }
    }
    
    public const int RequestFeedbackFieldNumber = 7;
    private bool hasRequestFeedback;
    private global::common.message.RequestFeedback requestFeedback_;
    public bool HasRequestFeedback {
      get { return hasRequestFeedback; }
    }
    public global::common.message.RequestFeedback RequestFeedback {
      get { return requestFeedback_ ?? global::common.message.RequestFeedback.DefaultInstance; }
    }
    
    public const int SharedMessageFieldNumber = 8;
    private bool hasSharedMessage;
    private global::common.message.SharedMessage sharedMessage_;
    public bool HasSharedMessage {
      get { return hasSharedMessage; }
    }
    public global::common.message.SharedMessage SharedMessage {
      get { return sharedMessage_ ?? global::common.message.SharedMessage.DefaultInstance; }
    }
    
    public const int SharedFileFieldNumber = 9;
    private bool hasSharedFile;
    private global::common.message.SharedFile sharedFile_;
    public bool HasSharedFile {
      get { return hasSharedFile; }
    }
    public global::common.message.SharedFile SharedFile {
      get { return sharedFile_ ?? global::common.message.SharedFile.DefaultInstance; }
    }
    
    public const int KeyboardEventFieldNumber = 10;
    private bool hasKeyboardEvent;
    private global::common.message.KeyboardEvent keyboardEvent_;
    public bool HasKeyboardEvent {
      get { return hasKeyboardEvent; }
    }
    public global::common.message.KeyboardEvent KeyboardEvent {
      get { return keyboardEvent_ ?? global::common.message.KeyboardEvent.DefaultInstance; }
    }
    
    public const int TimeStampFieldNumber = 11;
    private bool hasTimeStamp;
    private pb::ByteString timeStamp_ = pb::ByteString.Empty;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    public pb::ByteString TimeStamp {
      get { return timeStamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDataPacketType) return false;
        if (HasInfo) {
          if (!Info.IsInitialized) return false;
        }
        if (HasCommand) {
          if (!Command.IsInitialized) return false;
        }
        if (HasRequest) {
          if (!Request.IsInitialized) return false;
        }
        if (HasRequestFeedback) {
          if (!RequestFeedback.IsInitialized) return false;
        }
        if (HasSharedMessage) {
          if (!SharedMessage.IsInitialized) return false;
        }
        if (HasSharedFile) {
          if (!SharedFile.IsInitialized) return false;
        }
        if (HasKeyboardEvent) {
          if (!KeyboardEvent.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataPacketFieldNames;
      if (hasDataPacketType) {
        output.WriteEnum(1, field_names[2], (int) DataPacketType, DataPacketType);
      }
      if (hasInfo) {
        output.WriteMessage(2, field_names[3], Info);
      }
      if (hasVideo) {
        output.WriteMessage(3, field_names[10], Video);
      }
      if (hasAudio) {
        output.WriteMessage(4, field_names[0], Audio);
      }
      if (hasCommand) {
        output.WriteMessage(5, field_names[1], Command);
      }
      if (hasRequest) {
        output.WriteMessage(6, field_names[5], Request);
      }
      if (hasRequestFeedback) {
        output.WriteMessage(7, field_names[6], RequestFeedback);
      }
      if (hasSharedMessage) {
        output.WriteMessage(8, field_names[8], SharedMessage);
      }
      if (hasSharedFile) {
        output.WriteMessage(9, field_names[7], SharedFile);
      }
      if (hasKeyboardEvent) {
        output.WriteMessage(10, field_names[4], KeyboardEvent);
      }
      if (hasTimeStamp) {
        output.WriteBytes(11, field_names[9], TimeStamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDataPacketType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) DataPacketType);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Info);
        }
        if (hasVideo) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Video);
        }
        if (hasAudio) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Audio);
        }
        if (hasCommand) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Command);
        }
        if (hasRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Request);
        }
        if (hasRequestFeedback) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, RequestFeedback);
        }
        if (hasSharedMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, SharedMessage);
        }
        if (hasSharedFile) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, SharedFile);
        }
        if (hasKeyboardEvent) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, KeyboardEvent);
        }
        if (hasTimeStamp) {
          size += pb::CodedOutputStream.ComputeBytesSize(11, TimeStamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DataPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DataPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataPacket result;
      
      private DataPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          DataPacket original = result;
          result = new DataPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.DataPacket.Descriptor; }
      }
      
      public override DataPacket DefaultInstanceForType {
        get { return global::common.message.DataPacket.DefaultInstance; }
      }
      
      public override DataPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataPacket) {
          return MergeFrom((DataPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataPacket other) {
        if (other == global::common.message.DataPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDataPacketType) {
          DataPacketType = other.DataPacketType;
        }
        if (other.HasInfo) {
          MergeInfo(other.Info);
        }
        if (other.HasVideo) {
          MergeVideo(other.Video);
        }
        if (other.HasAudio) {
          MergeAudio(other.Audio);
        }
        if (other.HasCommand) {
          MergeCommand(other.Command);
        }
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        if (other.HasRequestFeedback) {
          MergeRequestFeedback(other.RequestFeedback);
        }
        if (other.HasSharedMessage) {
          MergeSharedMessage(other.SharedMessage);
        }
        if (other.HasSharedFile) {
          MergeSharedFile(other.SharedFile);
        }
        if (other.HasKeyboardEvent) {
          MergeKeyboardEvent(other.KeyboardEvent);
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.dataPacketType_, out unknown)) {
                result.hasDataPacketType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::common.message.Info.Builder subBuilder = global::common.message.Info.CreateBuilder();
              if (result.hasInfo) {
                subBuilder.MergeFrom(Info);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Info = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::common.message.Video.Builder subBuilder = global::common.message.Video.CreateBuilder();
              if (result.hasVideo) {
                subBuilder.MergeFrom(Video);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Video = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::common.message.Audio.Builder subBuilder = global::common.message.Audio.CreateBuilder();
              if (result.hasAudio) {
                subBuilder.MergeFrom(Audio);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Audio = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::common.message.Command.Builder subBuilder = global::common.message.Command.CreateBuilder();
              if (result.hasCommand) {
                subBuilder.MergeFrom(Command);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Command = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::common.message.Request.Builder subBuilder = global::common.message.Request.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::common.message.RequestFeedback.Builder subBuilder = global::common.message.RequestFeedback.CreateBuilder();
              if (result.hasRequestFeedback) {
                subBuilder.MergeFrom(RequestFeedback);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestFeedback = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::common.message.SharedMessage.Builder subBuilder = global::common.message.SharedMessage.CreateBuilder();
              if (result.hasSharedMessage) {
                subBuilder.MergeFrom(SharedMessage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SharedMessage = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::common.message.SharedFile.Builder subBuilder = global::common.message.SharedFile.CreateBuilder();
              if (result.hasSharedFile) {
                subBuilder.MergeFrom(SharedFile);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SharedFile = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::common.message.KeyboardEvent.Builder subBuilder = global::common.message.KeyboardEvent.CreateBuilder();
              if (result.hasKeyboardEvent) {
                subBuilder.MergeFrom(KeyboardEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KeyboardEvent = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              result.hasTimeStamp = input.ReadBytes(ref result.timeStamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDataPacketType {
       get { return result.hasDataPacketType; }
      }
      public global::common.message.DataPacket.Types.DataPacketType DataPacketType {
        get { return result.DataPacketType; }
        set { SetDataPacketType(value); }
      }
      public Builder SetDataPacketType(global::common.message.DataPacket.Types.DataPacketType value) {
        PrepareBuilder();
        result.hasDataPacketType = true;
        result.dataPacketType_ = value;
        return this;
      }
      public Builder ClearDataPacketType() {
        PrepareBuilder();
        result.hasDataPacketType = false;
        result.dataPacketType_ = global::common.message.DataPacket.Types.DataPacketType.Info;
        return this;
      }
      
      public bool HasInfo {
       get { return result.hasInfo; }
      }
      public global::common.message.Info Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(global::common.message.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder SetInfo(global::common.message.Info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInfo(global::common.message.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInfo &&
            result.info_ != global::common.message.Info.DefaultInstance) {
            result.info_ = global::common.message.Info.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
        } else {
          result.info_ = value;
        }
        result.hasInfo = true;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = null;
        return this;
      }
      
      public bool HasVideo {
       get { return result.hasVideo; }
      }
      public global::common.message.Video Video {
        get { return result.Video; }
        set { SetVideo(value); }
      }
      public Builder SetVideo(global::common.message.Video value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVideo = true;
        result.video_ = value;
        return this;
      }
      public Builder SetVideo(global::common.message.Video.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVideo = true;
        result.video_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVideo(global::common.message.Video value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVideo &&
            result.video_ != global::common.message.Video.DefaultInstance) {
            result.video_ = global::common.message.Video.CreateBuilder(result.video_).MergeFrom(value).BuildPartial();
        } else {
          result.video_ = value;
        }
        result.hasVideo = true;
        return this;
      }
      public Builder ClearVideo() {
        PrepareBuilder();
        result.hasVideo = false;
        result.video_ = null;
        return this;
      }
      
      public bool HasAudio {
       get { return result.hasAudio; }
      }
      public global::common.message.Audio Audio {
        get { return result.Audio; }
        set { SetAudio(value); }
      }
      public Builder SetAudio(global::common.message.Audio value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAudio = true;
        result.audio_ = value;
        return this;
      }
      public Builder SetAudio(global::common.message.Audio.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAudio = true;
        result.audio_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAudio(global::common.message.Audio value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAudio &&
            result.audio_ != global::common.message.Audio.DefaultInstance) {
            result.audio_ = global::common.message.Audio.CreateBuilder(result.audio_).MergeFrom(value).BuildPartial();
        } else {
          result.audio_ = value;
        }
        result.hasAudio = true;
        return this;
      }
      public Builder ClearAudio() {
        PrepareBuilder();
        result.hasAudio = false;
        result.audio_ = null;
        return this;
      }
      
      public bool HasCommand {
       get { return result.hasCommand; }
      }
      public global::common.message.Command Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(global::common.message.Command value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder SetCommand(global::common.message.Command.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCommand(global::common.message.Command value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCommand &&
            result.command_ != global::common.message.Command.DefaultInstance) {
            result.command_ = global::common.message.Command.CreateBuilder(result.command_).MergeFrom(value).BuildPartial();
        } else {
          result.command_ = value;
        }
        result.hasCommand = true;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = null;
        return this;
      }
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::common.message.Request Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::common.message.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::common.message.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::common.message.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::common.message.Request.DefaultInstance) {
            result.request_ = global::common.message.Request.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
      
      public bool HasRequestFeedback {
       get { return result.hasRequestFeedback; }
      }
      public global::common.message.RequestFeedback RequestFeedback {
        get { return result.RequestFeedback; }
        set { SetRequestFeedback(value); }
      }
      public Builder SetRequestFeedback(global::common.message.RequestFeedback value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestFeedback = true;
        result.requestFeedback_ = value;
        return this;
      }
      public Builder SetRequestFeedback(global::common.message.RequestFeedback.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestFeedback = true;
        result.requestFeedback_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestFeedback(global::common.message.RequestFeedback value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestFeedback &&
            result.requestFeedback_ != global::common.message.RequestFeedback.DefaultInstance) {
            result.requestFeedback_ = global::common.message.RequestFeedback.CreateBuilder(result.requestFeedback_).MergeFrom(value).BuildPartial();
        } else {
          result.requestFeedback_ = value;
        }
        result.hasRequestFeedback = true;
        return this;
      }
      public Builder ClearRequestFeedback() {
        PrepareBuilder();
        result.hasRequestFeedback = false;
        result.requestFeedback_ = null;
        return this;
      }
      
      public bool HasSharedMessage {
       get { return result.hasSharedMessage; }
      }
      public global::common.message.SharedMessage SharedMessage {
        get { return result.SharedMessage; }
        set { SetSharedMessage(value); }
      }
      public Builder SetSharedMessage(global::common.message.SharedMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSharedMessage = true;
        result.sharedMessage_ = value;
        return this;
      }
      public Builder SetSharedMessage(global::common.message.SharedMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSharedMessage = true;
        result.sharedMessage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSharedMessage(global::common.message.SharedMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSharedMessage &&
            result.sharedMessage_ != global::common.message.SharedMessage.DefaultInstance) {
            result.sharedMessage_ = global::common.message.SharedMessage.CreateBuilder(result.sharedMessage_).MergeFrom(value).BuildPartial();
        } else {
          result.sharedMessage_ = value;
        }
        result.hasSharedMessage = true;
        return this;
      }
      public Builder ClearSharedMessage() {
        PrepareBuilder();
        result.hasSharedMessage = false;
        result.sharedMessage_ = null;
        return this;
      }
      
      public bool HasSharedFile {
       get { return result.hasSharedFile; }
      }
      public global::common.message.SharedFile SharedFile {
        get { return result.SharedFile; }
        set { SetSharedFile(value); }
      }
      public Builder SetSharedFile(global::common.message.SharedFile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSharedFile = true;
        result.sharedFile_ = value;
        return this;
      }
      public Builder SetSharedFile(global::common.message.SharedFile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSharedFile = true;
        result.sharedFile_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSharedFile(global::common.message.SharedFile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSharedFile &&
            result.sharedFile_ != global::common.message.SharedFile.DefaultInstance) {
            result.sharedFile_ = global::common.message.SharedFile.CreateBuilder(result.sharedFile_).MergeFrom(value).BuildPartial();
        } else {
          result.sharedFile_ = value;
        }
        result.hasSharedFile = true;
        return this;
      }
      public Builder ClearSharedFile() {
        PrepareBuilder();
        result.hasSharedFile = false;
        result.sharedFile_ = null;
        return this;
      }
      
      public bool HasKeyboardEvent {
       get { return result.hasKeyboardEvent; }
      }
      public global::common.message.KeyboardEvent KeyboardEvent {
        get { return result.KeyboardEvent; }
        set { SetKeyboardEvent(value); }
      }
      public Builder SetKeyboardEvent(global::common.message.KeyboardEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKeyboardEvent = true;
        result.keyboardEvent_ = value;
        return this;
      }
      public Builder SetKeyboardEvent(global::common.message.KeyboardEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKeyboardEvent = true;
        result.keyboardEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKeyboardEvent(global::common.message.KeyboardEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKeyboardEvent &&
            result.keyboardEvent_ != global::common.message.KeyboardEvent.DefaultInstance) {
            result.keyboardEvent_ = global::common.message.KeyboardEvent.CreateBuilder(result.keyboardEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.keyboardEvent_ = value;
        }
        result.hasKeyboardEvent = true;
        return this;
      }
      public Builder ClearKeyboardEvent() {
        PrepareBuilder();
        result.hasKeyboardEvent = false;
        result.keyboardEvent_ = null;
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      public pb::ByteString TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      public Builder SetTimeStamp(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = pb::ByteString.Empty;
        return this;
      }
    }
    static DataPacket() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Command : pb::GeneratedMessage<Command, Command.Builder> {
    private Command() { }
    private static readonly Command defaultInstance = new Command().MakeReadOnly();
    private static readonly string[] _commandFieldNames = new string[] { "commandType", "x", "y" };
    private static readonly uint[] _commandFieldTags = new uint[] { 8, 21, 29 };
    public static Command DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Command__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command, Command.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Command__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CommandType {
        Minimize = 1,
        ShowDesktop = 2,
        ShutDownApp = 3,
        LeftClick = 4,
        RightClick = 5,
        Scroll = 6,
        SelectWindow = 7,
        StopAudioTransmission = 8,
        StopVideoTransmission = 9,
        StopAudioAndVideoTransmission = 10,
        StartAudioTransmission = 11,
        StartVideoTransmission = 12,
        StartAudioAndVideoTransmission = 13,
      }
      
    }
    #endregion
    
    public const int CommandTypeFieldNumber = 1;
    private bool hasCommandType;
    private global::common.message.Command.Types.CommandType commandType_ = global::common.message.Command.Types.CommandType.Minimize;
    public bool HasCommandType {
      get { return hasCommandType; }
    }
    public global::common.message.Command.Types.CommandType CommandType {
      get { return commandType_; }
    }
    
    public const int XFieldNumber = 2;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 3;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCommandType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandFieldNames;
      if (hasCommandType) {
        output.WriteEnum(1, field_names[0], (int) CommandType, CommandType);
      }
      if (hasX) {
        output.WriteFloat(2, field_names[1], X);
      }
      if (hasY) {
        output.WriteFloat(3, field_names[2], Y);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCommandType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) CommandType);
        }
        if (hasX) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Y);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Command, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command result;
      
      private Command PrepareBuilder() {
        if (resultIsReadOnly) {
          Command original = result;
          result = new Command();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Command.Descriptor; }
      }
      
      public override Command DefaultInstanceForType {
        get { return global::common.message.Command.DefaultInstance; }
      }
      
      public override Command BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command) {
          return MergeFrom((Command) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command other) {
        if (other == global::common.message.Command.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCommandType) {
          CommandType = other.CommandType;
        }
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.commandType_, out unknown)) {
                result.hasCommandType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 21: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 29: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCommandType {
       get { return result.hasCommandType; }
      }
      public global::common.message.Command.Types.CommandType CommandType {
        get { return result.CommandType; }
        set { SetCommandType(value); }
      }
      public Builder SetCommandType(global::common.message.Command.Types.CommandType value) {
        PrepareBuilder();
        result.hasCommandType = true;
        result.commandType_ = value;
        return this;
      }
      public Builder ClearCommandType() {
        PrepareBuilder();
        result.hasCommandType = false;
        result.commandType_ = global::common.message.Command.Types.CommandType.Minimize;
        return this;
      }
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
    }
    static Command() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Video : pb::GeneratedMessage<Video, Video.Builder> {
    private Video() { }
    private static readonly Video defaultInstance = new Video().MakeReadOnly();
    private static readonly string[] _videoFieldNames = new string[] { "image" };
    private static readonly uint[] _videoFieldTags = new uint[] { 10 };
    public static Video DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Video DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Video ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Video__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Video, Video.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Video__FieldAccessorTable; }
    }
    
    public const int ImageFieldNumber = 1;
    private bool hasImage;
    private pb::ByteString image_ = pb::ByteString.Empty;
    public bool HasImage {
      get { return hasImage; }
    }
    public pb::ByteString Image {
      get { return image_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _videoFieldNames;
      if (hasImage) {
        output.WriteBytes(1, field_names[0], Image);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasImage) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Image);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Video ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Video ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Video ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Video ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Video ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Video ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Video ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Video ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Video ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Video ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Video MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Video prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Video, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Video cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Video result;
      
      private Video PrepareBuilder() {
        if (resultIsReadOnly) {
          Video original = result;
          result = new Video();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Video MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Video.Descriptor; }
      }
      
      public override Video DefaultInstanceForType {
        get { return global::common.message.Video.DefaultInstance; }
      }
      
      public override Video BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Video) {
          return MergeFrom((Video) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Video other) {
        if (other == global::common.message.Video.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasImage) {
          Image = other.Image;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_videoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _videoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasImage = input.ReadBytes(ref result.image_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasImage {
        get { return result.hasImage; }
      }
      public pb::ByteString Image {
        get { return result.Image; }
        set { SetImage(value); }
      }
      public Builder SetImage(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImage = true;
        result.image_ = value;
        return this;
      }
      public Builder ClearImage() {
        PrepareBuilder();
        result.hasImage = false;
        result.image_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Video() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Audio : pb::GeneratedMessage<Audio, Audio.Builder> {
    private Audio() { }
    private static readonly Audio defaultInstance = new Audio().MakeReadOnly();
    private static readonly string[] _audioFieldNames = new string[] { "sound" };
    private static readonly uint[] _audioFieldTags = new uint[] { 10 };
    public static Audio DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Audio DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Audio ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Audio__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Audio, Audio.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Audio__FieldAccessorTable; }
    }
    
    public const int SoundFieldNumber = 1;
    private bool hasSound;
    private pb::ByteString sound_ = pb::ByteString.Empty;
    public bool HasSound {
      get { return hasSound; }
    }
    public pb::ByteString Sound {
      get { return sound_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _audioFieldNames;
      if (hasSound) {
        output.WriteBytes(1, field_names[0], Sound);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSound) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Sound);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Audio ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Audio ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Audio ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Audio ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Audio ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Audio ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Audio ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Audio ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Audio ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Audio ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Audio MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Audio prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Audio, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Audio cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Audio result;
      
      private Audio PrepareBuilder() {
        if (resultIsReadOnly) {
          Audio original = result;
          result = new Audio();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Audio MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Audio.Descriptor; }
      }
      
      public override Audio DefaultInstanceForType {
        get { return global::common.message.Audio.DefaultInstance; }
      }
      
      public override Audio BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Audio) {
          return MergeFrom((Audio) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Audio other) {
        if (other == global::common.message.Audio.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSound) {
          Sound = other.Sound;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_audioFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _audioFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSound = input.ReadBytes(ref result.sound_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSound {
        get { return result.hasSound; }
      }
      public pb::ByteString Sound {
        get { return result.Sound; }
        set { SetSound(value); }
      }
      public Builder SetSound(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSound = true;
        result.sound_ = value;
        return this;
      }
      public Builder ClearSound() {
        PrepareBuilder();
        result.hasSound = false;
        result.sound_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Audio() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Info : pb::GeneratedMessage<Info, Info.Builder> {
    private Info() { }
    private static readonly Info defaultInstance = new Info().MakeReadOnly();
    private static readonly string[] _infoFieldNames = new string[] { "deviceName", "height", "infoType", "portListening", "width" };
    private static readonly uint[] _infoFieldTags = new uint[] { 18, 32, 8, 40, 24 };
    public static Info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Info, Info.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Info__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum InfoType {
        Login = 1,
        Logout = 2,
        NormalInfo = 3,
      }
      
    }
    #endregion
    
    public const int InfoTypeFieldNumber = 1;
    private bool hasInfoType;
    private global::common.message.Info.Types.InfoType infoType_ = global::common.message.Info.Types.InfoType.Login;
    public bool HasInfoType {
      get { return hasInfoType; }
    }
    public global::common.message.Info.Types.InfoType InfoType {
      get { return infoType_; }
    }
    
    public const int DeviceNameFieldNumber = 2;
    private bool hasDeviceName;
    private pb::ByteString deviceName_ = pb::ByteString.Empty;
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public pb::ByteString DeviceName {
      get { return deviceName_; }
    }
    
    public const int WidthFieldNumber = 3;
    private bool hasWidth;
    private int width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public int Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 4;
    private bool hasHeight;
    private int height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public int Height {
      get { return height_; }
    }
    
    public const int PortListeningFieldNumber = 5;
    private bool hasPortListening;
    private int portListening_;
    public bool HasPortListening {
      get { return hasPortListening; }
    }
    public int PortListening {
      get { return portListening_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInfoType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _infoFieldNames;
      if (hasInfoType) {
        output.WriteEnum(1, field_names[2], (int) InfoType, InfoType);
      }
      if (hasDeviceName) {
        output.WriteBytes(2, field_names[0], DeviceName);
      }
      if (hasWidth) {
        output.WriteInt32(3, field_names[4], Width);
      }
      if (hasHeight) {
        output.WriteInt32(4, field_names[1], Height);
      }
      if (hasPortListening) {
        output.WriteInt32(5, field_names[3], PortListening);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasInfoType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) InfoType);
        }
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, DeviceName);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Height);
        }
        if (hasPortListening) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, PortListening);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Info MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Info result;
      
      private Info PrepareBuilder() {
        if (resultIsReadOnly) {
          Info original = result;
          result = new Info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Info.Descriptor; }
      }
      
      public override Info DefaultInstanceForType {
        get { return global::common.message.Info.DefaultInstance; }
      }
      
      public override Info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Info) {
          return MergeFrom((Info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Info other) {
        if (other == global::common.message.Info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInfoType) {
          InfoType = other.InfoType;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        if (other.HasPortListening) {
          PortListening = other.PortListening;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_infoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _infoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.infoType_, out unknown)) {
                result.hasInfoType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasDeviceName = input.ReadBytes(ref result.deviceName_);
              break;
            }
            case 24: {
              result.hasWidth = input.ReadInt32(ref result.width_);
              break;
            }
            case 32: {
              result.hasHeight = input.ReadInt32(ref result.height_);
              break;
            }
            case 40: {
              result.hasPortListening = input.ReadInt32(ref result.portListening_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInfoType {
       get { return result.hasInfoType; }
      }
      public global::common.message.Info.Types.InfoType InfoType {
        get { return result.InfoType; }
        set { SetInfoType(value); }
      }
      public Builder SetInfoType(global::common.message.Info.Types.InfoType value) {
        PrepareBuilder();
        result.hasInfoType = true;
        result.infoType_ = value;
        return this;
      }
      public Builder ClearInfoType() {
        PrepareBuilder();
        result.hasInfoType = false;
        result.infoType_ = global::common.message.Info.Types.InfoType.Login;
        return this;
      }
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public pb::ByteString DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
      
      public bool HasPortListening {
        get { return result.hasPortListening; }
      }
      public int PortListening {
        get { return result.PortListening; }
        set { SetPortListening(value); }
      }
      public Builder SetPortListening(int value) {
        PrepareBuilder();
        result.hasPortListening = true;
        result.portListening_ = value;
        return this;
      }
      public Builder ClearPortListening() {
        PrepareBuilder();
        result.hasPortListening = false;
        result.portListening_ = 0;
        return this;
      }
    }
    static Info() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Resolution : pb::GeneratedMessage<Resolution, Resolution.Builder> {
    private Resolution() { }
    private static readonly Resolution defaultInstance = new Resolution().MakeReadOnly();
    private static readonly string[] _resolutionFieldNames = new string[] { "height", "width" };
    private static readonly uint[] _resolutionFieldTags = new uint[] { 16, 8 };
    public static Resolution DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Resolution DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Resolution ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Resolution__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Resolution, Resolution.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Resolution__FieldAccessorTable; }
    }
    
    public const int WidthFieldNumber = 1;
    private bool hasWidth;
    private int width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public int Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 2;
    private bool hasHeight;
    private int height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public int Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resolutionFieldNames;
      if (hasWidth) {
        output.WriteInt32(1, field_names[1], Width);
      }
      if (hasHeight) {
        output.WriteInt32(2, field_names[0], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Resolution ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Resolution ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Resolution ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Resolution ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Resolution ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Resolution ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Resolution ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Resolution ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Resolution ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Resolution ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Resolution MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Resolution prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Resolution, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Resolution cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Resolution result;
      
      private Resolution PrepareBuilder() {
        if (resultIsReadOnly) {
          Resolution original = result;
          result = new Resolution();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Resolution MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Resolution.Descriptor; }
      }
      
      public override Resolution DefaultInstanceForType {
        get { return global::common.message.Resolution.DefaultInstance; }
      }
      
      public override Resolution BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Resolution) {
          return MergeFrom((Resolution) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Resolution other) {
        if (other == global::common.message.Resolution.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resolutionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resolutionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWidth = input.ReadInt32(ref result.width_);
              break;
            }
            case 16: {
              result.hasHeight = input.ReadInt32(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
    }
    static Resolution() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
    private Request() { }
    private static readonly Request defaultInstance = new Request().MakeReadOnly();
    private static readonly string[] _requestFieldNames = new string[] { "filePath", "requestType" };
    private static readonly uint[] _requestFieldTags = new uint[] { 18, 8 };
    public static Request DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Request DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Request ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_Request__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_Request__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum RequestType {
        Movie = 1,
        Music = 2,
        File = 3,
        RemoveMovie = 4,
        RemoveMusic = 5,
        RemoveFile = 6,
        SaveFile = 7,
        SaveMusic = 8,
        SaveMovie = 9,
        SendFile = 10,
      }
      
    }
    #endregion
    
    public const int RequestTypeFieldNumber = 1;
    private bool hasRequestType;
    private global::common.message.Request.Types.RequestType requestType_ = global::common.message.Request.Types.RequestType.Movie;
    public bool HasRequestType {
      get { return hasRequestType; }
    }
    public global::common.message.Request.Types.RequestType RequestType {
      get { return requestType_; }
    }
    
    public const int FilePathFieldNumber = 2;
    private bool hasFilePath;
    private pb::ByteString filePath_ = pb::ByteString.Empty;
    public bool HasFilePath {
      get { return hasFilePath; }
    }
    public pb::ByteString FilePath {
      get { return filePath_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRequestType) return false;
        if (!hasFilePath) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestFieldNames;
      if (hasRequestType) {
        output.WriteEnum(1, field_names[1], (int) RequestType, RequestType);
      }
      if (hasFilePath) {
        output.WriteBytes(2, field_names[0], FilePath);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRequestType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) RequestType);
        }
        if (hasFilePath) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, FilePath);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Request ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Request MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Request prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Request cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Request result;
      
      private Request PrepareBuilder() {
        if (resultIsReadOnly) {
          Request original = result;
          result = new Request();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Request MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.Request.Descriptor; }
      }
      
      public override Request DefaultInstanceForType {
        get { return global::common.message.Request.DefaultInstance; }
      }
      
      public override Request BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Request) {
          return MergeFrom((Request) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Request other) {
        if (other == global::common.message.Request.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequestType) {
          RequestType = other.RequestType;
        }
        if (other.HasFilePath) {
          FilePath = other.FilePath;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.requestType_, out unknown)) {
                result.hasRequestType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasFilePath = input.ReadBytes(ref result.filePath_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRequestType {
       get { return result.hasRequestType; }
      }
      public global::common.message.Request.Types.RequestType RequestType {
        get { return result.RequestType; }
        set { SetRequestType(value); }
      }
      public Builder SetRequestType(global::common.message.Request.Types.RequestType value) {
        PrepareBuilder();
        result.hasRequestType = true;
        result.requestType_ = value;
        return this;
      }
      public Builder ClearRequestType() {
        PrepareBuilder();
        result.hasRequestType = false;
        result.requestType_ = global::common.message.Request.Types.RequestType.Movie;
        return this;
      }
      
      public bool HasFilePath {
        get { return result.hasFilePath; }
      }
      public pb::ByteString FilePath {
        get { return result.FilePath; }
        set { SetFilePath(value); }
      }
      public Builder SetFilePath(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilePath = true;
        result.filePath_ = value;
        return this;
      }
      public Builder ClearFilePath() {
        PrepareBuilder();
        result.hasFilePath = false;
        result.filePath_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Request() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RequestFeedback : pb::GeneratedMessage<RequestFeedback, RequestFeedback.Builder> {
    private RequestFeedback() { }
    private static readonly RequestFeedback defaultInstance = new RequestFeedback().MakeReadOnly();
    private static readonly string[] _requestFeedbackFieldNames = new string[] { "filePath" };
    private static readonly uint[] _requestFeedbackFieldTags = new uint[] { 10 };
    public static RequestFeedback DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RequestFeedback DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RequestFeedback ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_RequestFeedback__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RequestFeedback, RequestFeedback.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_RequestFeedback__FieldAccessorTable; }
    }
    
    public const int FilePathFieldNumber = 1;
    private bool hasFilePath;
    private pb::ByteString filePath_ = pb::ByteString.Empty;
    public bool HasFilePath {
      get { return hasFilePath; }
    }
    public pb::ByteString FilePath {
      get { return filePath_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFilePath) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestFeedbackFieldNames;
      if (hasFilePath) {
        output.WriteBytes(1, field_names[0], FilePath);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFilePath) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, FilePath);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RequestFeedback ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestFeedback ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestFeedback ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestFeedback ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestFeedback ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestFeedback ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RequestFeedback ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RequestFeedback ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RequestFeedback ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestFeedback ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RequestFeedback MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RequestFeedback prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RequestFeedback, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RequestFeedback cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RequestFeedback result;
      
      private RequestFeedback PrepareBuilder() {
        if (resultIsReadOnly) {
          RequestFeedback original = result;
          result = new RequestFeedback();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RequestFeedback MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.RequestFeedback.Descriptor; }
      }
      
      public override RequestFeedback DefaultInstanceForType {
        get { return global::common.message.RequestFeedback.DefaultInstance; }
      }
      
      public override RequestFeedback BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RequestFeedback) {
          return MergeFrom((RequestFeedback) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RequestFeedback other) {
        if (other == global::common.message.RequestFeedback.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFilePath) {
          FilePath = other.FilePath;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestFeedbackFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestFeedbackFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFilePath = input.ReadBytes(ref result.filePath_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFilePath {
        get { return result.hasFilePath; }
      }
      public pb::ByteString FilePath {
        get { return result.FilePath; }
        set { SetFilePath(value); }
      }
      public Builder SetFilePath(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilePath = true;
        result.filePath_ = value;
        return this;
      }
      public Builder ClearFilePath() {
        PrepareBuilder();
        result.hasFilePath = false;
        result.filePath_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RequestFeedback() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SharedFile : pb::GeneratedMessage<SharedFile, SharedFile.Builder> {
    private SharedFile() { }
    private static readonly SharedFile defaultInstance = new SharedFile().MakeReadOnly();
    private static readonly string[] _sharedFileFieldNames = new string[] { "content", "fileLength", "fileName" };
    private static readonly uint[] _sharedFileFieldTags = new uint[] { 26, 16, 10 };
    public static SharedFile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SharedFile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SharedFile ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_SharedFile__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SharedFile, SharedFile.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_SharedFile__FieldAccessorTable; }
    }
    
    public const int FileNameFieldNumber = 1;
    private bool hasFileName;
    private pb::ByteString fileName_ = pb::ByteString.Empty;
    public bool HasFileName {
      get { return hasFileName; }
    }
    public pb::ByteString FileName {
      get { return fileName_; }
    }
    
    public const int FileLengthFieldNumber = 2;
    private bool hasFileLength;
    private long fileLength_;
    public bool HasFileLength {
      get { return hasFileLength; }
    }
    public long FileLength {
      get { return fileLength_; }
    }
    
    public const int ContentFieldNumber = 3;
    private bool hasContent;
    private pb::ByteString content_ = pb::ByteString.Empty;
    public bool HasContent {
      get { return hasContent; }
    }
    public pb::ByteString Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFileLength) return false;
        if (!hasContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sharedFileFieldNames;
      if (hasFileName) {
        output.WriteBytes(1, field_names[2], FileName);
      }
      if (hasFileLength) {
        output.WriteInt64(2, field_names[1], FileLength);
      }
      if (hasContent) {
        output.WriteBytes(3, field_names[0], Content);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFileName) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, FileName);
        }
        if (hasFileLength) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, FileLength);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Content);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SharedFile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SharedFile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SharedFile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SharedFile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SharedFile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SharedFile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SharedFile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SharedFile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SharedFile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SharedFile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SharedFile MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SharedFile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SharedFile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SharedFile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SharedFile result;
      
      private SharedFile PrepareBuilder() {
        if (resultIsReadOnly) {
          SharedFile original = result;
          result = new SharedFile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SharedFile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.SharedFile.Descriptor; }
      }
      
      public override SharedFile DefaultInstanceForType {
        get { return global::common.message.SharedFile.DefaultInstance; }
      }
      
      public override SharedFile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SharedFile) {
          return MergeFrom((SharedFile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SharedFile other) {
        if (other == global::common.message.SharedFile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasFileLength) {
          FileLength = other.FileLength;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sharedFileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sharedFileFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFileName = input.ReadBytes(ref result.fileName_);
              break;
            }
            case 16: {
              result.hasFileLength = input.ReadInt64(ref result.fileLength_);
              break;
            }
            case 26: {
              result.hasContent = input.ReadBytes(ref result.content_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public pb::ByteString FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasFileLength {
        get { return result.hasFileLength; }
      }
      public long FileLength {
        get { return result.FileLength; }
        set { SetFileLength(value); }
      }
      public Builder SetFileLength(long value) {
        PrepareBuilder();
        result.hasFileLength = true;
        result.fileLength_ = value;
        return this;
      }
      public Builder ClearFileLength() {
        PrepareBuilder();
        result.hasFileLength = false;
        result.fileLength_ = 0L;
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public pb::ByteString Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = pb::ByteString.Empty;
        return this;
      }
    }
    static SharedFile() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SharedMessage : pb::GeneratedMessage<SharedMessage, SharedMessage.Builder> {
    private SharedMessage() { }
    private static readonly SharedMessage defaultInstance = new SharedMessage().MakeReadOnly();
    private static readonly string[] _sharedMessageFieldNames = new string[] { "content" };
    private static readonly uint[] _sharedMessageFieldTags = new uint[] { 10 };
    public static SharedMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SharedMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SharedMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_SharedMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SharedMessage, SharedMessage.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_SharedMessage__FieldAccessorTable; }
    }
    
    public const int ContentFieldNumber = 1;
    private bool hasContent;
    private pb::ByteString content_ = pb::ByteString.Empty;
    public bool HasContent {
      get { return hasContent; }
    }
    public pb::ByteString Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sharedMessageFieldNames;
      if (hasContent) {
        output.WriteBytes(1, field_names[0], Content);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Content);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SharedMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SharedMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SharedMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SharedMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SharedMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SharedMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SharedMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SharedMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SharedMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SharedMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SharedMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SharedMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SharedMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SharedMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SharedMessage result;
      
      private SharedMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SharedMessage original = result;
          result = new SharedMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SharedMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.SharedMessage.Descriptor; }
      }
      
      public override SharedMessage DefaultInstanceForType {
        get { return global::common.message.SharedMessage.DefaultInstance; }
      }
      
      public override SharedMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SharedMessage) {
          return MergeFrom((SharedMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SharedMessage other) {
        if (other == global::common.message.SharedMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContent) {
          Content = other.Content;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sharedMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sharedMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasContent = input.ReadBytes(ref result.content_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public pb::ByteString Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = pb::ByteString.Empty;
        return this;
      }
    }
    static SharedMessage() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class KeyboardEvent : pb::GeneratedMessage<KeyboardEvent, KeyboardEvent.Builder> {
    private KeyboardEvent() { }
    private static readonly KeyboardEvent defaultInstance = new KeyboardEvent().MakeReadOnly();
    private static readonly string[] _keyboardEventFieldNames = new string[] { "keyCode" };
    private static readonly uint[] _keyboardEventFieldTags = new uint[] { 8 };
    public static KeyboardEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override KeyboardEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override KeyboardEvent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::common.message.Data.internal__static_common_message_KeyboardEvent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<KeyboardEvent, KeyboardEvent.Builder> InternalFieldAccessors {
      get { return global::common.message.Data.internal__static_common_message_KeyboardEvent__FieldAccessorTable; }
    }
    
    public const int KeyCodeFieldNumber = 1;
    private bool hasKeyCode;
    private int keyCode_;
    public bool HasKeyCode {
      get { return hasKeyCode; }
    }
    public int KeyCode {
      get { return keyCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKeyCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _keyboardEventFieldNames;
      if (hasKeyCode) {
        output.WriteInt32(1, field_names[0], KeyCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKeyCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, KeyCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static KeyboardEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static KeyboardEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static KeyboardEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KeyboardEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private KeyboardEvent MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(KeyboardEvent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<KeyboardEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(KeyboardEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private KeyboardEvent result;
      
      private KeyboardEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          KeyboardEvent original = result;
          result = new KeyboardEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override KeyboardEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::common.message.KeyboardEvent.Descriptor; }
      }
      
      public override KeyboardEvent DefaultInstanceForType {
        get { return global::common.message.KeyboardEvent.DefaultInstance; }
      }
      
      public override KeyboardEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is KeyboardEvent) {
          return MergeFrom((KeyboardEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(KeyboardEvent other) {
        if (other == global::common.message.KeyboardEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKeyCode) {
          KeyCode = other.KeyCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_keyboardEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _keyboardEventFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKeyCode = input.ReadInt32(ref result.keyCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKeyCode {
        get { return result.hasKeyCode; }
      }
      public int KeyCode {
        get { return result.KeyCode; }
        set { SetKeyCode(value); }
      }
      public Builder SetKeyCode(int value) {
        PrepareBuilder();
        result.hasKeyCode = true;
        result.keyCode_ = value;
        return this;
      }
      public Builder ClearKeyCode() {
        PrepareBuilder();
        result.hasKeyCode = false;
        result.keyCode_ = 0;
        return this;
      }
    }
    static KeyboardEvent() {
      object.ReferenceEquals(global::common.message.Data.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
